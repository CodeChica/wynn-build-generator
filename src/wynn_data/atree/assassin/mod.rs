//! This file is autogenerated by rs_generator.py.<br>Code in this file uses wynncraft item data from [wynnbuilder's github repo](https://raw.githubusercontent.com/hppeng-wynn/hppeng-wynn.github.io/dev/data/2.0.4.3/items.json)
pub (super) mod atree_data;use core::fmt;use crate::wynn_data::{WynnEnum,TryIntoWynnEnumError};use crate::enum_from_into;
#[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy,Debug)]
pub enum AtreeItems{#[default]SpinAttack,DaggerProficiencyI,CheaperSpinAttack,DoubleSpin,PoisonedBlade,Dash,DoubleSlice,SmokeBomb,CheaperDash,Multihit,EarthMastery,ThunderMastery,FireMastery,WaterMastery,AirMastery,Backstab,Fatality,Vanish,StickyBomb,RightingReflex,SurpriseStrike,MirrorImage,Lacerate,SilentKiller,Shenanigans,WallOfSmoke,BetterSmokeBomb,ShadowTravel,CheaperMultihit,DaggerProficiencyIi,LastLaugh,CheaperSmokeBomb,BlazingPowder,Weightless,BlackHole,Sandbagging,Hop,DancingBlade,ViolentVortex,DeliriousGas,StrongerMultihit,Marked,Echo,Shurikens,FarReach,Psithurism,Ambush,CheaperDashIi,Parry,CheaperSpinAttack2,DeathMagnet,CheaperMultihitIi,Hoodwink,ChokeBomb,WallJump,FatalSpin,StrongerLacerate,StrongerVortex,Harvester,CheaperSmokeBomb2,BladeFury,MoreMarks,StrongerClones,Ricochets,Satsujin,ForbiddenArt,Diversion,JasmineBloom,BetterWeightless,Devour,BetterMarked,Bamboozle,Distraction,NightcloakKnife,Pirouette,Dissolution,FlowState,EvenStrongerClones}
impl WynnEnum for AtreeItems{const VARIENTS:&'static[Self]=&[Self::SpinAttack,Self::DaggerProficiencyI,Self::CheaperSpinAttack,Self::DoubleSpin,Self::PoisonedBlade,Self::Dash,Self::DoubleSlice,Self::SmokeBomb,Self::CheaperDash,Self::Multihit,Self::EarthMastery,Self::ThunderMastery,Self::FireMastery,Self::WaterMastery,Self::AirMastery,Self::Backstab,Self::Fatality,Self::Vanish,Self::StickyBomb,Self::RightingReflex,Self::SurpriseStrike,Self::MirrorImage,Self::Lacerate,Self::SilentKiller,Self::Shenanigans,Self::WallOfSmoke,Self::BetterSmokeBomb,Self::ShadowTravel,Self::CheaperMultihit,Self::DaggerProficiencyIi,Self::LastLaugh,Self::CheaperSmokeBomb,Self::BlazingPowder,Self::Weightless,Self::BlackHole,Self::Sandbagging,Self::Hop,Self::DancingBlade,Self::ViolentVortex,Self::DeliriousGas,Self::StrongerMultihit,Self::Marked,Self::Echo,Self::Shurikens,Self::FarReach,Self::Psithurism,Self::Ambush,Self::CheaperDashIi,Self::Parry,Self::CheaperSpinAttack2,Self::DeathMagnet,Self::CheaperMultihitIi,Self::Hoodwink,Self::ChokeBomb,Self::WallJump,Self::FatalSpin,Self::StrongerLacerate,Self::StrongerVortex,Self::Harvester,Self::CheaperSmokeBomb2,Self::BladeFury,Self::MoreMarks,Self::StrongerClones,Self::Ricochets,Self::Satsujin,Self::ForbiddenArt,Self::Diversion,Self::JasmineBloom,Self::BetterWeightless,Self::Devour,Self::BetterMarked,Self::Bamboozle,Self::Distraction,Self::NightcloakKnife,Self::Pirouette,Self::Dissolution,Self::FlowState,Self::EvenStrongerClones];const ENUM_TYPE_ID:u8=30;}impl std::convert::TryFrom<u8> for AtreeItems{type Error=TryIntoWynnEnumError<u8,Self>;fn try_from(n: u8) -> Result<Self,Self::Error> {match n{0 => Ok(AtreeItems::SpinAttack), 1 => Ok(AtreeItems::DaggerProficiencyI), 2 => Ok(AtreeItems::CheaperSpinAttack), 3 => Ok(AtreeItems::DoubleSpin), 4 => Ok(AtreeItems::PoisonedBlade), 5 => Ok(AtreeItems::Dash), 6 => Ok(AtreeItems::DoubleSlice), 7 => Ok(AtreeItems::SmokeBomb), 8 => Ok(AtreeItems::CheaperDash), 9 => Ok(AtreeItems::Multihit), 10 => Ok(AtreeItems::EarthMastery), 11 => Ok(AtreeItems::ThunderMastery), 12 => Ok(AtreeItems::FireMastery), 13 => Ok(AtreeItems::WaterMastery), 14 => Ok(AtreeItems::AirMastery), 15 => Ok(AtreeItems::Backstab), 16 => Ok(AtreeItems::Fatality), 17 => Ok(AtreeItems::Vanish), 18 => Ok(AtreeItems::StickyBomb), 19 => Ok(AtreeItems::RightingReflex), 20 => Ok(AtreeItems::SurpriseStrike), 21 => Ok(AtreeItems::MirrorImage), 22 => Ok(AtreeItems::Lacerate), 23 => Ok(AtreeItems::SilentKiller), 24 => Ok(AtreeItems::Shenanigans), 25 => Ok(AtreeItems::WallOfSmoke), 26 => Ok(AtreeItems::BetterSmokeBomb), 27 => Ok(AtreeItems::ShadowTravel), 28 => Ok(AtreeItems::CheaperMultihit), 29 => Ok(AtreeItems::DaggerProficiencyIi), 30 => Ok(AtreeItems::LastLaugh), 31 => Ok(AtreeItems::CheaperSmokeBomb), 32 => Ok(AtreeItems::BlazingPowder), 33 => Ok(AtreeItems::Weightless), 34 => Ok(AtreeItems::BlackHole), 35 => Ok(AtreeItems::Sandbagging), 36 => Ok(AtreeItems::Hop), 37 => Ok(AtreeItems::DancingBlade), 38 => Ok(AtreeItems::ViolentVortex), 39 => Ok(AtreeItems::DeliriousGas), 40 => Ok(AtreeItems::StrongerMultihit), 41 => Ok(AtreeItems::Marked), 42 => Ok(AtreeItems::Echo), 43 => Ok(AtreeItems::Shurikens), 44 => Ok(AtreeItems::FarReach), 45 => Ok(AtreeItems::Psithurism), 46 => Ok(AtreeItems::Ambush), 47 => Ok(AtreeItems::CheaperDashIi), 48 => Ok(AtreeItems::Parry), 49 => Ok(AtreeItems::CheaperSpinAttack2), 50 => Ok(AtreeItems::DeathMagnet), 51 => Ok(AtreeItems::CheaperMultihitIi), 52 => Ok(AtreeItems::Hoodwink), 53 => Ok(AtreeItems::ChokeBomb), 54 => Ok(AtreeItems::WallJump), 55 => Ok(AtreeItems::FatalSpin), 56 => Ok(AtreeItems::StrongerLacerate), 57 => Ok(AtreeItems::StrongerVortex), 58 => Ok(AtreeItems::Harvester), 59 => Ok(AtreeItems::CheaperSmokeBomb2), 60 => Ok(AtreeItems::BladeFury), 61 => Ok(AtreeItems::MoreMarks), 62 => Ok(AtreeItems::StrongerClones), 63 => Ok(AtreeItems::Ricochets), 64 => Ok(AtreeItems::Satsujin), 65 => Ok(AtreeItems::ForbiddenArt), 66 => Ok(AtreeItems::Diversion), 67 => Ok(AtreeItems::JasmineBloom), 68 => Ok(AtreeItems::BetterWeightless), 69 => Ok(AtreeItems::Devour), 70 => Ok(AtreeItems::BetterMarked), 71 => Ok(AtreeItems::Bamboozle), 72 => Ok(AtreeItems::Distraction), 73 => Ok(AtreeItems::NightcloakKnife), 74 => Ok(AtreeItems::Pirouette), 75 => Ok(AtreeItems::Dissolution), 76 => Ok(AtreeItems::FlowState), 77 => Ok(AtreeItems::EvenStrongerClones), _ => Err(TryIntoWynnEnumError{from: n, to: Self::default()})}}}
impl fmt::Display for AtreeItems{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{AtreeItems::SpinAttack => "Spin Attack", AtreeItems::DaggerProficiencyI => "Dagger Proficiency I", AtreeItems::CheaperSpinAttack => "Cheaper Spin Attack", AtreeItems::DoubleSpin => "Double Spin", AtreeItems::PoisonedBlade => "Poisoned Blade", AtreeItems::Dash => "Dash", AtreeItems::DoubleSlice => "Double Slice", AtreeItems::SmokeBomb => "Smoke Bomb", AtreeItems::CheaperDash => "Cheaper Dash", AtreeItems::Multihit => "Multihit", AtreeItems::EarthMastery => "Earth Mastery", AtreeItems::ThunderMastery => "Thunder Mastery", AtreeItems::FireMastery => "Fire Mastery", AtreeItems::WaterMastery => "Water Mastery", AtreeItems::AirMastery => "Air Mastery", AtreeItems::Backstab => "Backstab", AtreeItems::Fatality => "Fatality", AtreeItems::Vanish => "Vanish", AtreeItems::StickyBomb => "Sticky Bomb", AtreeItems::RightingReflex => "Righting Reflex", AtreeItems::SurpriseStrike => "Surprise Strike", AtreeItems::MirrorImage => "Mirror Image", AtreeItems::Lacerate => "Lacerate", AtreeItems::SilentKiller => "Silent Killer", AtreeItems::Shenanigans => "Shenanigans", AtreeItems::WallOfSmoke => "Wall of Smoke", AtreeItems::BetterSmokeBomb => "Better Smoke Bomb", AtreeItems::ShadowTravel => "Shadow Travel", AtreeItems::CheaperMultihit => "Cheaper Multihit", AtreeItems::DaggerProficiencyIi => "Dagger Proficiency II", AtreeItems::LastLaugh => "Last Laugh", AtreeItems::CheaperSmokeBomb => "Cheaper Smoke Bomb", AtreeItems::BlazingPowder => "Blazing Powder", AtreeItems::Weightless => "Weightless", AtreeItems::BlackHole => "Black Hole", AtreeItems::Sandbagging => "Sandbagging", AtreeItems::Hop => "Hop", AtreeItems::DancingBlade => "Dancing Blade", AtreeItems::ViolentVortex => "Violent Vortex", AtreeItems::DeliriousGas => "Delirious Gas", AtreeItems::StrongerMultihit => "Stronger Multihit", AtreeItems::Marked => "Marked", AtreeItems::Echo => "Echo", AtreeItems::Shurikens => "Shurikens", AtreeItems::FarReach => "Far Reach", AtreeItems::Psithurism => "Psithurism", AtreeItems::Ambush => "Ambush", AtreeItems::CheaperDashIi => "Cheaper Dash II", AtreeItems::Parry => "Parry", AtreeItems::CheaperSpinAttack2 => "Cheaper Spin Attack 2", AtreeItems::DeathMagnet => "Death Magnet", AtreeItems::CheaperMultihitIi => "Cheaper Multihit II", AtreeItems::Hoodwink => "Hoodwink", AtreeItems::ChokeBomb => "Choke Bomb", AtreeItems::WallJump => "Wall Jump", AtreeItems::FatalSpin => "Fatal Spin", AtreeItems::StrongerLacerate => "Stronger Lacerate", AtreeItems::StrongerVortex => "Stronger Vortex", AtreeItems::Harvester => "Harvester", AtreeItems::CheaperSmokeBomb2 => "Cheaper Smoke Bomb 2", AtreeItems::BladeFury => "Blade Fury", AtreeItems::MoreMarks => "More Marks", AtreeItems::StrongerClones => "Stronger Clones", AtreeItems::Ricochets => "Ricochets", AtreeItems::Satsujin => "Satsujin", AtreeItems::ForbiddenArt => "Forbidden Art", AtreeItems::Diversion => "Diversion", AtreeItems::JasmineBloom => "Jasmine Bloom", AtreeItems::BetterWeightless => "Better Weightless", AtreeItems::Devour => "Devour", AtreeItems::BetterMarked => "Better Marked", AtreeItems::Bamboozle => "Bamboozle", AtreeItems::Distraction => "Distraction", AtreeItems::NightcloakKnife => "Nightcloak Knife", AtreeItems::Pirouette => "Pirouette", AtreeItems::Dissolution => "Dissolution", AtreeItems::FlowState => "Flow State", AtreeItems::EvenStrongerClones => "Even Stronger Clones", })}}enum_from_into!(AtreeItems, u8,u32,u64,i32,i64,usize);
#[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy,Debug)]
pub enum Prop{#[default]Duration,Cooldown,Clone,Range}
impl WynnEnum for Prop{const VARIENTS:&'static[Self]=&[Self::Duration,Self::Cooldown,Self::Clone,Self::Range];const ENUM_TYPE_ID:u8=31;}impl std::convert::TryFrom<u8> for Prop{type Error=TryIntoWynnEnumError<u8,Self>;fn try_from(n: u8) -> Result<Self,Self::Error> {match n{0 => Ok(Prop::Duration), 1 => Ok(Prop::Cooldown), 2 => Ok(Prop::Clone), 3 => Ok(Prop::Range), _ => Err(TryIntoWynnEnumError{from: n, to: Self::default()})}}}
impl fmt::Display for Prop{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{Prop::Duration => "Duration", Prop::Cooldown => "Cooldown", Prop::Clone => "Clone", Prop::Range => "Range", })}}enum_from_into!(Prop, u8,u32,u64,i32,i64,usize);
#[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy,Debug)]
pub enum Spell{#[default]Melee,SpinAttack,Dash,SmokeBomb,Multihit,Backstab,Lacerate,ViolentVortex,Shurikens,JasmineBloom,Bamboozle}
impl WynnEnum for Spell{const VARIENTS:&'static[Self]=&[Self::Melee,Self::SpinAttack,Self::Dash,Self::SmokeBomb,Self::Multihit,Self::Backstab,Self::Lacerate,Self::ViolentVortex,Self::Shurikens,Self::JasmineBloom,Self::Bamboozle];const ENUM_TYPE_ID:u8=32;}impl std::convert::TryFrom<u8> for Spell{type Error=TryIntoWynnEnumError<u8,Self>;fn try_from(n: u8) -> Result<Self,Self::Error> {match n{0 => Ok(Spell::Melee), 1 => Ok(Spell::SpinAttack), 2 => Ok(Spell::Dash), 3 => Ok(Spell::SmokeBomb), 4 => Ok(Spell::Multihit), 5 => Ok(Spell::Backstab), 6 => Ok(Spell::Lacerate), 7 => Ok(Spell::ViolentVortex), 8 => Ok(Spell::Shurikens), 9 => Ok(Spell::JasmineBloom), 10 => Ok(Spell::Bamboozle), _ => Err(TryIntoWynnEnumError{from: n, to: Self::default()})}}}
impl fmt::Display for Spell{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{Spell::Melee => "Melee", Spell::SpinAttack => "SpinAttack", Spell::Dash => "Dash", Spell::SmokeBomb => "SmokeBomb", Spell::Multihit => "Multihit", Spell::Backstab => "Backstab", Spell::Lacerate => "Lacerate", Spell::ViolentVortex => "ViolentVortex", Spell::Shurikens => "Shurikens", Spell::JasmineBloom => "JasmineBloom", Spell::Bamboozle => "Bamboozle", })}}enum_from_into!(Spell, u8,u32,u64,i32,i64,usize);
#[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy,Debug)]
pub enum SpellPart{#[default]None,Total,Dps,TotalDps,SpinAttack,PerTick,PerBomb,PerHit,BackstabDamage,PerShuriken,SlashDamage,Melee,Fatality,DancingBlade}
impl WynnEnum for SpellPart{const VARIENTS:&'static[Self]=&[Self::None,Self::Total,Self::Dps,Self::TotalDps,Self::SpinAttack,Self::PerTick,Self::PerBomb,Self::PerHit,Self::BackstabDamage,Self::PerShuriken,Self::SlashDamage,Self::Melee,Self::Fatality,Self::DancingBlade];const ENUM_TYPE_ID:u8=33;}impl std::convert::TryFrom<u8> for SpellPart{type Error=TryIntoWynnEnumError<u8,Self>;fn try_from(n: u8) -> Result<Self,Self::Error> {match n{0 => Ok(SpellPart::None), 1 => Ok(SpellPart::Total), 2 => Ok(SpellPart::Dps), 3 => Ok(SpellPart::TotalDps), 4 => Ok(SpellPart::SpinAttack), 5 => Ok(SpellPart::PerTick), 6 => Ok(SpellPart::PerBomb), 7 => Ok(SpellPart::PerHit), 8 => Ok(SpellPart::BackstabDamage), 9 => Ok(SpellPart::PerShuriken), 10 => Ok(SpellPart::SlashDamage), 11 => Ok(SpellPart::Melee), 12 => Ok(SpellPart::Fatality), 13 => Ok(SpellPart::DancingBlade), _ => Err(TryIntoWynnEnumError{from: n, to: Self::default()})}}}
impl fmt::Display for SpellPart{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{SpellPart::None => "None", SpellPart::Total => "Total", SpellPart::Dps => "Dps", SpellPart::TotalDps => "TotalDps", SpellPart::SpinAttack => "SpinAttack", SpellPart::PerTick => "PerTick", SpellPart::PerBomb => "PerBomb", SpellPart::PerHit => "PerHit", SpellPart::BackstabDamage => "BackstabDamage", SpellPart::PerShuriken => "PerShuriken", SpellPart::SlashDamage => "SlashDamage", SpellPart::Melee => "Melee", SpellPart::Fatality => "Fatality", SpellPart::DancingBlade => "DancingBlade", })}}enum_from_into!(SpellPart, u8,u32,u64,i32,i64,usize);