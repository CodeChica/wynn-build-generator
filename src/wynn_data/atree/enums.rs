//! This file is autogenerated by rs_generator.py.<br>Code in this file uses wynncraft item data from [wynnbuilder's github repo](https://raw.githubusercontent.com/hppeng-wynn/hppeng-wynn.github.io/dev/data/2.0.4.3/items.json)
use core::fmt;use crate::wynn_data::{WynnEnum,TryIntoWynnEnumError};use crate::enum_from_into;
#[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy,Debug)]
pub enum AtreeKey{#[default]DisplayName,Parents,Dependencies,Blockers,Cost,Properties,Effects,Id,BaseAbil,Archetype,ArchetypeReq}
impl WynnEnum for AtreeKey{const VARIENTS:&'static[Self]=&[Self::DisplayName,Self::Parents,Self::Dependencies,Self::Blockers,Self::Cost,Self::Properties,Self::Effects,Self::Id,Self::BaseAbil,Self::Archetype,Self::ArchetypeReq];const ENUM_TYPE_ID:u8=11;}impl std::convert::TryFrom<u8> for AtreeKey{type Error=TryIntoWynnEnumError<u8,Self>;fn try_from(n: u8) -> Result<Self,Self::Error> {match n{0 => Ok(AtreeKey::DisplayName), 1 => Ok(AtreeKey::Parents), 2 => Ok(AtreeKey::Dependencies), 3 => Ok(AtreeKey::Blockers), 4 => Ok(AtreeKey::Cost), 5 => Ok(AtreeKey::Properties), 6 => Ok(AtreeKey::Effects), 7 => Ok(AtreeKey::Id), 8 => Ok(AtreeKey::BaseAbil), 9 => Ok(AtreeKey::Archetype), 10 => Ok(AtreeKey::ArchetypeReq), _ => Err(TryIntoWynnEnumError{from: n, to: Self::default()})}}}
impl fmt::Display for AtreeKey{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{AtreeKey::DisplayName => "DisplayName", AtreeKey::Parents => "Parents", AtreeKey::Dependencies => "Dependencies", AtreeKey::Blockers => "Blockers", AtreeKey::Cost => "Cost", AtreeKey::Properties => "Properties", AtreeKey::Effects => "Effects", AtreeKey::Id => "Id", AtreeKey::BaseAbil => "BaseAbil", AtreeKey::Archetype => "Archetype", AtreeKey::ArchetypeReq => "ArchetypeReq", })}}enum_from_into!(AtreeKey, u8,u32,u64,i32,i64,usize);
#[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy,Debug)]
pub enum Archetype{#[default]None,Boltslinger,Sharpshooter,Trapper,Fallen,Paladin,BattleMonk,Riftwalker,Arcanist,LightBender,Shadestepper,Acrobat,Trickster,Summoner,Acolyte,Ritualist}
impl WynnEnum for Archetype{const VARIENTS:&'static[Self]=&[Self::None,Self::Boltslinger,Self::Sharpshooter,Self::Trapper,Self::Fallen,Self::Paladin,Self::BattleMonk,Self::Riftwalker,Self::Arcanist,Self::LightBender,Self::Shadestepper,Self::Acrobat,Self::Trickster,Self::Summoner,Self::Acolyte,Self::Ritualist];const ENUM_TYPE_ID:u8=12;}impl std::convert::TryFrom<u8> for Archetype{type Error=TryIntoWynnEnumError<u8,Self>;fn try_from(n: u8) -> Result<Self,Self::Error> {match n{0 => Ok(Archetype::None), 1 => Ok(Archetype::Boltslinger), 2 => Ok(Archetype::Sharpshooter), 3 => Ok(Archetype::Trapper), 4 => Ok(Archetype::Fallen), 5 => Ok(Archetype::Paladin), 6 => Ok(Archetype::BattleMonk), 7 => Ok(Archetype::Riftwalker), 8 => Ok(Archetype::Arcanist), 9 => Ok(Archetype::LightBender), 10 => Ok(Archetype::Shadestepper), 11 => Ok(Archetype::Acrobat), 12 => Ok(Archetype::Trickster), 13 => Ok(Archetype::Summoner), 14 => Ok(Archetype::Acolyte), 15 => Ok(Archetype::Ritualist), _ => Err(TryIntoWynnEnumError{from: n, to: Self::default()})}}}
impl fmt::Display for Archetype{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{Archetype::None => "None", Archetype::Boltslinger => "Boltslinger", Archetype::Sharpshooter => "Sharpshooter", Archetype::Trapper => "Trapper", Archetype::Fallen => "Fallen", Archetype::Paladin => "Paladin", Archetype::BattleMonk => "BattleMonk", Archetype::Riftwalker => "Riftwalker", Archetype::Arcanist => "Arcanist", Archetype::LightBender => "LightBender", Archetype::Shadestepper => "Shadestepper", Archetype::Acrobat => "Acrobat", Archetype::Trickster => "Trickster", Archetype::Summoner => "Summoner", Archetype::Acolyte => "Acolyte", Archetype::Ritualist => "Ritualist", })}}enum_from_into!(Archetype, u8,u32,u64,i32,i64,usize);
#[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy,Debug)]
pub enum EffectKey{#[default]Type,Name,Cost,BaseSpell,TargetPart,Toggle,Slider,SliderName,SliderMax,Max,UseAtkspd,Behavior,SliderStep,Hide,Round,Power,SliderDefault,Parts,Multipliers,Bonuses,Output,Scaling,Inputs,Hits}
impl WynnEnum for EffectKey{const VARIENTS:&'static[Self]=&[Self::Type,Self::Name,Self::Cost,Self::BaseSpell,Self::TargetPart,Self::Toggle,Self::Slider,Self::SliderName,Self::SliderMax,Self::Max,Self::UseAtkspd,Self::Behavior,Self::SliderStep,Self::Hide,Self::Round,Self::Power,Self::SliderDefault,Self::Parts,Self::Multipliers,Self::Bonuses,Self::Output,Self::Scaling,Self::Inputs,Self::Hits];const ENUM_TYPE_ID:u8=13;}impl std::convert::TryFrom<u8> for EffectKey{type Error=TryIntoWynnEnumError<u8,Self>;fn try_from(n: u8) -> Result<Self,Self::Error> {match n{0 => Ok(EffectKey::Type), 1 => Ok(EffectKey::Name), 2 => Ok(EffectKey::Cost), 3 => Ok(EffectKey::BaseSpell), 4 => Ok(EffectKey::TargetPart), 5 => Ok(EffectKey::Toggle), 6 => Ok(EffectKey::Slider), 7 => Ok(EffectKey::SliderName), 8 => Ok(EffectKey::SliderMax), 9 => Ok(EffectKey::Max), 10 => Ok(EffectKey::UseAtkspd), 11 => Ok(EffectKey::Behavior), 12 => Ok(EffectKey::SliderStep), 13 => Ok(EffectKey::Hide), 14 => Ok(EffectKey::Round), 15 => Ok(EffectKey::Power), 16 => Ok(EffectKey::SliderDefault), 17 => Ok(EffectKey::Parts), 18 => Ok(EffectKey::Multipliers), 19 => Ok(EffectKey::Bonuses), 20 => Ok(EffectKey::Output), 21 => Ok(EffectKey::Scaling), 22 => Ok(EffectKey::Inputs), 23 => Ok(EffectKey::Hits), _ => Err(TryIntoWynnEnumError{from: n, to: Self::default()})}}}
impl fmt::Display for EffectKey{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{EffectKey::Type => "Type", EffectKey::Name => "Name", EffectKey::Cost => "Cost", EffectKey::BaseSpell => "BaseSpell", EffectKey::TargetPart => "TargetPart", EffectKey::Toggle => "Toggle", EffectKey::Slider => "Slider", EffectKey::SliderName => "SliderName", EffectKey::SliderMax => "SliderMax", EffectKey::Max => "Max", EffectKey::UseAtkspd => "UseAtkspd", EffectKey::Behavior => "Behavior", EffectKey::SliderStep => "SliderStep", EffectKey::Hide => "Hide", EffectKey::Round => "Round", EffectKey::Power => "Power", EffectKey::SliderDefault => "SliderDefault", EffectKey::Parts => "Parts", EffectKey::Multipliers => "Multipliers", EffectKey::Bonuses => "Bonuses", EffectKey::Output => "Output", EffectKey::Scaling => "Scaling", EffectKey::Inputs => "Inputs", EffectKey::Hits => "Hits", })}}enum_from_into!(EffectKey, u8,u32,u64,i32,i64,usize);
#[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy,Debug)]
pub enum EffectType{#[default]ReplaceSpell,AddSpellProp,RawStat,StatScaling}
impl WynnEnum for EffectType{const VARIENTS:&'static[Self]=&[Self::ReplaceSpell,Self::AddSpellProp,Self::RawStat,Self::StatScaling];const ENUM_TYPE_ID:u8=14;}impl std::convert::TryFrom<u8> for EffectType{type Error=TryIntoWynnEnumError<u8,Self>;fn try_from(n: u8) -> Result<Self,Self::Error> {match n{0 => Ok(EffectType::ReplaceSpell), 1 => Ok(EffectType::AddSpellProp), 2 => Ok(EffectType::RawStat), 3 => Ok(EffectType::StatScaling), _ => Err(TryIntoWynnEnumError{from: n, to: Self::default()})}}}
impl fmt::Display for EffectType{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{EffectType::ReplaceSpell => "ReplaceSpell", EffectType::AddSpellProp => "AddSpellProp", EffectType::RawStat => "RawStat", EffectType::StatScaling => "StatScaling", })}}enum_from_into!(EffectType, u8,u32,u64,i32,i64,usize);
#[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy,Debug)]
pub enum BonusType{#[default]Stat,Prop}
impl WynnEnum for BonusType{const VARIENTS:&'static[Self]=&[Self::Stat,Self::Prop];const ENUM_TYPE_ID:u8=15;}impl std::convert::TryFrom<u8> for BonusType{type Error=TryIntoWynnEnumError<u8,Self>;fn try_from(n: u8) -> Result<Self,Self::Error> {match n{0 => Ok(BonusType::Stat), 1 => Ok(BonusType::Prop), _ => Err(TryIntoWynnEnumError{from: n, to: Self::default()})}}}
impl fmt::Display for BonusType{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{BonusType::Stat => "Stat", BonusType::Prop => "Prop", })}}enum_from_into!(BonusType, u8,u32,u64,i32,i64,usize);
#[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy,Debug)]
pub enum EffectPartKey{#[default]Name,Type,Power,Multipliers,Hits}
impl WynnEnum for EffectPartKey{const VARIENTS:&'static[Self]=&[Self::Name,Self::Type,Self::Power,Self::Multipliers,Self::Hits];const ENUM_TYPE_ID:u8=16;}impl std::convert::TryFrom<u8> for EffectPartKey{type Error=TryIntoWynnEnumError<u8,Self>;fn try_from(n: u8) -> Result<Self,Self::Error> {match n{0 => Ok(EffectPartKey::Name), 1 => Ok(EffectPartKey::Type), 2 => Ok(EffectPartKey::Power), 3 => Ok(EffectPartKey::Multipliers), 4 => Ok(EffectPartKey::Hits), _ => Err(TryIntoWynnEnumError{from: n, to: Self::default()})}}}
impl fmt::Display for EffectPartKey{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{EffectPartKey::Name => "Name", EffectPartKey::Type => "Type", EffectPartKey::Power => "Power", EffectPartKey::Multipliers => "Multipliers", EffectPartKey::Hits => "Hits", })}}enum_from_into!(EffectPartKey, u8,u32,u64,i32,i64,usize);
#[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy,Debug)]
pub enum EffectPartType{#[default]Damage,Total}
impl WynnEnum for EffectPartType{const VARIENTS:&'static[Self]=&[Self::Damage,Self::Total];const ENUM_TYPE_ID:u8=17;}impl std::convert::TryFrom<u8> for EffectPartType{type Error=TryIntoWynnEnumError<u8,Self>;fn try_from(n: u8) -> Result<Self,Self::Error> {match n{0 => Ok(EffectPartType::Damage), 1 => Ok(EffectPartType::Total), _ => Err(TryIntoWynnEnumError{from: n, to: Self::default()})}}}
impl fmt::Display for EffectPartType{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{EffectPartType::Damage => "Damage", EffectPartType::Total => "Total", })}}enum_from_into!(EffectPartType, u8,u32,u64,i32,i64,usize);