// mod items_list; use core::fmt; use std::mem::discriminant; use std::vec::IntoIter; pub const NUM_ITEM_ATRS: usize = 118; pub const NUM_ITEM_PROPS: usize = 13; pub const NUM_ITEM_IDS: usize = 89; pub const NUM_ELE_IDS: usize = 48; pub const NUM_NON_IDS: usize = 29;const DIGITS: [char; 64] = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','+','-'];
// const fn parse_data_atr(n: u32)->u32{n>>24}const fn parse_data_u32(n: u32)->u32{n&0xFFFFFF}const fn parse_data_i32(n: u32)->i32{(n as i32)<<8>>8}
// #[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy)]
// pub enum MajorIds{#[default]Alterego,Freerunner,Geocentrism,FuriousEffigy,Expunge,Magnet,Juggle,Lightweight,Cavalryman,ForestBlessing,SoulEater,Sorcery,Plague,Greed,Arcanes,Fission,CherryBombs,Lunge,Overwhelm,DivineHonor,Rally,Temblor,Altruism,PeacefulEffigy,Hero,GruesomeKnots,DescSnowysteps,Madness,DescFestivespirit,Coagulate,Taunt,RecklessAbandon,Hawkeye,Rovingassassin,StringsOfFate,Flashfreeze,Entropy,Guardian,Windsurf,Gravitywell,ExplosiveImpact,PerfectRecall,GentleGlow,EscapeRoute,Deadweight}
// impl MajorIds{pub fn from_usize(n: usize) -> Result<Self,String> {match n{0 => Result::Ok(MajorIds::Alterego), 1 => Result::Ok(MajorIds::Freerunner), 2 => Result::Ok(MajorIds::Geocentrism), 3 => Result::Ok(MajorIds::FuriousEffigy), 4 => Result::Ok(MajorIds::Expunge), 5 => Result::Ok(MajorIds::Magnet), 6 => Result::Ok(MajorIds::Juggle), 7 => Result::Ok(MajorIds::Lightweight), 8 => Result::Ok(MajorIds::Cavalryman), 9 => Result::Ok(MajorIds::ForestBlessing), 10 => Result::Ok(MajorIds::SoulEater), 11 => Result::Ok(MajorIds::Sorcery), 12 => Result::Ok(MajorIds::Plague), 13 => Result::Ok(MajorIds::Greed), 14 => Result::Ok(MajorIds::Arcanes), 15 => Result::Ok(MajorIds::Fission), 16 => Result::Ok(MajorIds::CherryBombs), 17 => Result::Ok(MajorIds::Lunge), 18 => Result::Ok(MajorIds::Overwhelm), 19 => Result::Ok(MajorIds::DivineHonor), 20 => Result::Ok(MajorIds::Rally), 21 => Result::Ok(MajorIds::Temblor), 22 => Result::Ok(MajorIds::Altruism), 23 => Result::Ok(MajorIds::PeacefulEffigy), 24 => Result::Ok(MajorIds::Hero), 25 => Result::Ok(MajorIds::GruesomeKnots), 26 => Result::Ok(MajorIds::DescSnowysteps), 27 => Result::Ok(MajorIds::Madness), 28 => Result::Ok(MajorIds::DescFestivespirit), 29 => Result::Ok(MajorIds::Coagulate), 30 => Result::Ok(MajorIds::Taunt), 31 => Result::Ok(MajorIds::RecklessAbandon), 32 => Result::Ok(MajorIds::Hawkeye), 33 => Result::Ok(MajorIds::Rovingassassin), 34 => Result::Ok(MajorIds::StringsOfFate), 35 => Result::Ok(MajorIds::Flashfreeze), 36 => Result::Ok(MajorIds::Entropy), 37 => Result::Ok(MajorIds::Guardian), 38 => Result::Ok(MajorIds::Windsurf), 39 => Result::Ok(MajorIds::Gravitywell), 40 => Result::Ok(MajorIds::ExplosiveImpact), 41 => Result::Ok(MajorIds::PerfectRecall), 42 => Result::Ok(MajorIds::GentleGlow), 43 => Result::Ok(MajorIds::EscapeRoute), 44 => Result::Ok(MajorIds::Deadweight), _ => Result::Err(String::from("Invalid number"))}}
// pub fn from_u32(n: u32) -> Result<Self,String>{match n{0 => Result::Ok(MajorIds::Alterego), 1 => Result::Ok(MajorIds::Freerunner), 2 => Result::Ok(MajorIds::Geocentrism), 3 => Result::Ok(MajorIds::FuriousEffigy), 4 => Result::Ok(MajorIds::Expunge), 5 => Result::Ok(MajorIds::Magnet), 6 => Result::Ok(MajorIds::Juggle), 7 => Result::Ok(MajorIds::Lightweight), 8 => Result::Ok(MajorIds::Cavalryman), 9 => Result::Ok(MajorIds::ForestBlessing), 10 => Result::Ok(MajorIds::SoulEater), 11 => Result::Ok(MajorIds::Sorcery), 12 => Result::Ok(MajorIds::Plague), 13 => Result::Ok(MajorIds::Greed), 14 => Result::Ok(MajorIds::Arcanes), 15 => Result::Ok(MajorIds::Fission), 16 => Result::Ok(MajorIds::CherryBombs), 17 => Result::Ok(MajorIds::Lunge), 18 => Result::Ok(MajorIds::Overwhelm), 19 => Result::Ok(MajorIds::DivineHonor), 20 => Result::Ok(MajorIds::Rally), 21 => Result::Ok(MajorIds::Temblor), 22 => Result::Ok(MajorIds::Altruism), 23 => Result::Ok(MajorIds::PeacefulEffigy), 24 => Result::Ok(MajorIds::Hero), 25 => Result::Ok(MajorIds::GruesomeKnots), 26 => Result::Ok(MajorIds::DescSnowysteps), 27 => Result::Ok(MajorIds::Madness), 28 => Result::Ok(MajorIds::DescFestivespirit), 29 => Result::Ok(MajorIds::Coagulate), 30 => Result::Ok(MajorIds::Taunt), 31 => Result::Ok(MajorIds::RecklessAbandon), 32 => Result::Ok(MajorIds::Hawkeye), 33 => Result::Ok(MajorIds::Rovingassassin), 34 => Result::Ok(MajorIds::StringsOfFate), 35 => Result::Ok(MajorIds::Flashfreeze), 36 => Result::Ok(MajorIds::Entropy), 37 => Result::Ok(MajorIds::Guardian), 38 => Result::Ok(MajorIds::Windsurf), 39 => Result::Ok(MajorIds::Gravitywell), 40 => Result::Ok(MajorIds::ExplosiveImpact), 41 => Result::Ok(MajorIds::PerfectRecall), 42 => Result::Ok(MajorIds::GentleGlow), 43 => Result::Ok(MajorIds::EscapeRoute), 44 => Result::Ok(MajorIds::Deadweight), _ => Result::Err(String::from("Invalid number"))}}
// pub fn to_num(&self) -> usize{match self{MajorIds::Alterego => 0, MajorIds::Freerunner => 1, MajorIds::Geocentrism => 2, MajorIds::FuriousEffigy => 3, MajorIds::Expunge => 4, MajorIds::Magnet => 5, MajorIds::Juggle => 6, MajorIds::Lightweight => 7, MajorIds::Cavalryman => 8, MajorIds::ForestBlessing => 9, MajorIds::SoulEater => 10, MajorIds::Sorcery => 11, MajorIds::Plague => 12, MajorIds::Greed => 13, MajorIds::Arcanes => 14, MajorIds::Fission => 15, MajorIds::CherryBombs => 16, MajorIds::Lunge => 17, MajorIds::Overwhelm => 18, MajorIds::DivineHonor => 19, MajorIds::Rally => 20, MajorIds::Temblor => 21, MajorIds::Altruism => 22, MajorIds::PeacefulEffigy => 23, MajorIds::Hero => 24, MajorIds::GruesomeKnots => 25, MajorIds::DescSnowysteps => 26, MajorIds::Madness => 27, MajorIds::DescFestivespirit => 28, MajorIds::Coagulate => 29, MajorIds::Taunt => 30, MajorIds::RecklessAbandon => 31, MajorIds::Hawkeye => 32, MajorIds::Rovingassassin => 33, MajorIds::StringsOfFate => 34, MajorIds::Flashfreeze => 35, MajorIds::Entropy => 36, MajorIds::Guardian => 37, MajorIds::Windsurf => 38, MajorIds::Gravitywell => 39, MajorIds::ExplosiveImpact => 40, MajorIds::PerfectRecall => 41, MajorIds::GentleGlow => 42, MajorIds::EscapeRoute => 43, MajorIds::Deadweight => 44, }}}
// impl fmt::Display for MajorIds{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{MajorIds::Alterego => "ALTEREGO", MajorIds::Freerunner => "FREERUNNER", MajorIds::Geocentrism => "GEOCENTRISM", MajorIds::FuriousEffigy => "FURIOUS_EFFIGY", MajorIds::Expunge => "EXPUNGE", MajorIds::Magnet => "MAGNET", MajorIds::Juggle => "JUGGLE", MajorIds::Lightweight => "LIGHTWEIGHT", MajorIds::Cavalryman => "CAVALRYMAN", MajorIds::ForestBlessing => "FOREST_BLESSING", MajorIds::SoulEater => "SOUL_EATER", MajorIds::Sorcery => "SORCERY", MajorIds::Plague => "PLAGUE", MajorIds::Greed => "GREED", MajorIds::Arcanes => "ARCANES", MajorIds::Fission => "FISSION", MajorIds::CherryBombs => "CHERRY_BOMBS", MajorIds::Lunge => "LUNGE", MajorIds::Overwhelm => "OVERWHELM", MajorIds::DivineHonor => "DIVINE_HONOR", MajorIds::Rally => "RALLY", MajorIds::Temblor => "TEMBLOR", MajorIds::Altruism => "ALTRUISM", MajorIds::PeacefulEffigy => "PEACEFUL_EFFIGY", MajorIds::Hero => "HERO", MajorIds::GruesomeKnots => "GRUESOME_KNOTS", MajorIds::DescSnowysteps => "DESC_SNOWYSTEPS", MajorIds::Madness => "MADNESS", MajorIds::DescFestivespirit => "DESC_FESTIVESPIRIT", MajorIds::Coagulate => "COAGULATE", MajorIds::Taunt => "TAUNT", MajorIds::RecklessAbandon => "RECKLESS_ABANDON", MajorIds::Hawkeye => "HAWKEYE", MajorIds::Rovingassassin => "ROVINGASSASSIN", MajorIds::StringsOfFate => "STRINGS_OF_FATE", MajorIds::Flashfreeze => "FLASHFREEZE", MajorIds::Entropy => "ENTROPY", MajorIds::Guardian => "GUARDIAN", MajorIds::Windsurf => "WINDSURF", MajorIds::Gravitywell => "GRAVITYWELL", MajorIds::ExplosiveImpact => "EXPLOSIVE_IMPACT", MajorIds::PerfectRecall => "PERFECT_RECALL", MajorIds::GentleGlow => "GENTLE_GLOW", MajorIds::EscapeRoute => "ESCAPE_ROUTE", MajorIds::Deadweight => "DEADWEIGHT", })}}
// #[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy)]
// pub enum Type{#[default]Helmet,Chestplate,Leggings,Boots,Ring,Bracelet,Necklace,Spear,Bow,Wand,Dagger,Relik}
// impl Type{pub fn from_usize(n: usize) -> Result<Self,String> {match n{0 => Result::Ok(Type::Helmet), 1 => Result::Ok(Type::Chestplate), 2 => Result::Ok(Type::Leggings), 3 => Result::Ok(Type::Boots), 4 => Result::Ok(Type::Ring), 5 => Result::Ok(Type::Bracelet), 6 => Result::Ok(Type::Necklace), 7 => Result::Ok(Type::Spear), 8 => Result::Ok(Type::Bow), 9 => Result::Ok(Type::Wand), 10 => Result::Ok(Type::Dagger), 11 => Result::Ok(Type::Relik), _ => Result::Err(String::from("Invalid number"))}}
// pub fn from_u32(n: u32) -> Result<Self,String>{match n{0 => Result::Ok(Type::Helmet), 1 => Result::Ok(Type::Chestplate), 2 => Result::Ok(Type::Leggings), 3 => Result::Ok(Type::Boots), 4 => Result::Ok(Type::Ring), 5 => Result::Ok(Type::Bracelet), 6 => Result::Ok(Type::Necklace), 7 => Result::Ok(Type::Spear), 8 => Result::Ok(Type::Bow), 9 => Result::Ok(Type::Wand), 10 => Result::Ok(Type::Dagger), 11 => Result::Ok(Type::Relik), _ => Result::Err(String::from("Invalid number"))}}
// pub fn to_num(&self) -> usize{match self{Type::Helmet => 0, Type::Chestplate => 1, Type::Leggings => 2, Type::Boots => 3, Type::Ring => 4, Type::Bracelet => 5, Type::Necklace => 6, Type::Spear => 7, Type::Bow => 8, Type::Wand => 9, Type::Dagger => 10, Type::Relik => 11, }}}
// impl fmt::Display for Type{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{Type::Helmet => "Helmet", Type::Chestplate => "Chestplate", Type::Leggings => "Leggings", Type::Boots => "Boots", Type::Ring => "Ring", Type::Bracelet => "Bracelet", Type::Necklace => "Necklace", Type::Spear => "Spear", Type::Bow => "Bow", Type::Wand => "Wand", Type::Dagger => "Dagger", Type::Relik => "Relik", })}}
// #[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy)]
// pub enum Restrict{#[default]Untradable,QuestItem}
// impl Restrict{pub fn from_usize(n: usize) -> Result<Self,String> {match n{0 => Result::Ok(Restrict::Untradable), 1 => Result::Ok(Restrict::QuestItem), _ => Result::Err(String::from("Invalid number"))}}
// pub fn from_u32(n: u32) -> Result<Self,String>{match n{0 => Result::Ok(Restrict::Untradable), 1 => Result::Ok(Restrict::QuestItem), _ => Result::Err(String::from("Invalid number"))}}
// pub fn to_num(&self) -> usize{match self{Restrict::Untradable => 0, Restrict::QuestItem => 1, }}}
// impl fmt::Display for Restrict{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{Restrict::Untradable => "Untradable", Restrict::QuestItem => "Quest Item", })}}
// #[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy)]
// pub enum Category{#[default]Armor,Weapon,Accessory}
// impl Category{pub fn from_usize(n: usize) -> Result<Self,String> {match n{0 => Result::Ok(Category::Armor), 1 => Result::Ok(Category::Weapon), 2 => Result::Ok(Category::Accessory), _ => Result::Err(String::from("Invalid number"))}}
// pub fn from_u32(n: u32) -> Result<Self,String>{match n{0 => Result::Ok(Category::Armor), 1 => Result::Ok(Category::Weapon), 2 => Result::Ok(Category::Accessory), _ => Result::Err(String::from("Invalid number"))}}
// pub fn to_num(&self) -> usize{match self{Category::Armor => 0, Category::Weapon => 1, Category::Accessory => 2, }}}
// impl fmt::Display for Category{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{Category::Armor => "Armor", Category::Weapon => "Weapon", Category::Accessory => "Accessory", })}}
// #[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy)]
// pub enum Tier{#[default]Common,Unique,Rare,Legendary,Set,Fabled,Mythic}
// impl Tier{pub fn from_usize(n: usize) -> Result<Self,String> {match n{0 => Result::Ok(Tier::Common), 1 => Result::Ok(Tier::Unique), 2 => Result::Ok(Tier::Rare), 3 => Result::Ok(Tier::Legendary), 4 => Result::Ok(Tier::Set), 5 => Result::Ok(Tier::Fabled), 6 => Result::Ok(Tier::Mythic), _ => Result::Err(String::from("Invalid number"))}}
// pub fn from_u32(n: u32) -> Result<Self,String>{match n{0 => Result::Ok(Tier::Common), 1 => Result::Ok(Tier::Unique), 2 => Result::Ok(Tier::Rare), 3 => Result::Ok(Tier::Legendary), 4 => Result::Ok(Tier::Set), 5 => Result::Ok(Tier::Fabled), 6 => Result::Ok(Tier::Mythic), _ => Result::Err(String::from("Invalid number"))}}
// pub fn to_num(&self) -> usize{match self{Tier::Common => 0, Tier::Unique => 1, Tier::Rare => 2, Tier::Legendary => 3, Tier::Set => 4, Tier::Fabled => 5, Tier::Mythic => 6, }}}
// impl fmt::Display for Tier{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{Tier::Common => "Common", Tier::Unique => "Unique", Tier::Rare => "Rare", Tier::Legendary => "Legendary", Tier::Set => "Set", Tier::Fabled => "Fabled", Tier::Mythic => "Mythic", })}}
// #[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy)]
// pub enum AtkSpd{#[default]SuperSlow,VerySlow,Slow,Normal,Fast,VeryFast,SuperFast}
// impl AtkSpd{pub fn from_usize(n: usize) -> Result<Self,String> {match n{0 => Result::Ok(AtkSpd::SuperSlow), 1 => Result::Ok(AtkSpd::VerySlow), 2 => Result::Ok(AtkSpd::Slow), 3 => Result::Ok(AtkSpd::Normal), 4 => Result::Ok(AtkSpd::Fast), 5 => Result::Ok(AtkSpd::VeryFast), 6 => Result::Ok(AtkSpd::SuperFast), _ => Result::Err(String::from("Invalid number"))}}
// pub fn from_u32(n: u32) -> Result<Self,String>{match n{0 => Result::Ok(AtkSpd::SuperSlow), 1 => Result::Ok(AtkSpd::VerySlow), 2 => Result::Ok(AtkSpd::Slow), 3 => Result::Ok(AtkSpd::Normal), 4 => Result::Ok(AtkSpd::Fast), 5 => Result::Ok(AtkSpd::VeryFast), 6 => Result::Ok(AtkSpd::SuperFast), _ => Result::Err(String::from("Invalid number"))}}
// pub fn to_num(&self) -> usize{match self{AtkSpd::SuperSlow => 0, AtkSpd::VerySlow => 1, AtkSpd::Slow => 2, AtkSpd::Normal => 3, AtkSpd::Fast => 4, AtkSpd::VeryFast => 5, AtkSpd::SuperFast => 6, }}}
// impl fmt::Display for AtkSpd{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{AtkSpd::SuperSlow => "SUPER_SLOW", AtkSpd::VerySlow => "VERY_SLOW", AtkSpd::Slow => "SLOW", AtkSpd::Normal => "NORMAL", AtkSpd::Fast => "FAST", AtkSpd::VeryFast => "VERY_FAST", AtkSpd::SuperFast => "SUPER_FAST", })}}
// #[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy)]
// pub enum ClassReq{#[default]Assassin,Warrior,Archer,Mage,Shaman}
// impl ClassReq{pub fn from_usize(n: usize) -> Result<Self,String> {match n{0 => Result::Ok(ClassReq::Assassin), 1 => Result::Ok(ClassReq::Warrior), 2 => Result::Ok(ClassReq::Archer), 3 => Result::Ok(ClassReq::Mage), 4 => Result::Ok(ClassReq::Shaman), _ => Result::Err(String::from("Invalid number"))}}
// pub fn from_u32(n: u32) -> Result<Self,String>{match n{0 => Result::Ok(ClassReq::Assassin), 1 => Result::Ok(ClassReq::Warrior), 2 => Result::Ok(ClassReq::Archer), 3 => Result::Ok(ClassReq::Mage), 4 => Result::Ok(ClassReq::Shaman), _ => Result::Err(String::from("Invalid number"))}}
// pub fn to_num(&self) -> usize{match self{ClassReq::Assassin => 0, ClassReq::Warrior => 1, ClassReq::Archer => 2, ClassReq::Mage => 3, ClassReq::Shaman => 4, }}}
// impl fmt::Display for ClassReq{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{ClassReq::Assassin => "Assassin", ClassReq::Warrior => "Warrior", ClassReq::Archer => "Archer", ClassReq::Mage => "Mage", ClassReq::Shaman => "Shaman", })}}
// #[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy)]
// pub enum Sets{#[default]None,Boundless,OrnateShadow,Grookwarts,MasterHive,ThunderHive,AirHive,EarthHive,WaterHive,FireHive,SynchCore,Black,RedTeam,Tribal,Champion,Outlaw,Snail,ThanosLegionnaire,Ghostly,Adventurers,AirRelic,Spider,Pigman,Kaerynns,Bandits,Jester,Silverfish,Skiens,Snow,Veekhats,Morph,BlackCatalyst,Leaf,Vexing,Hallowynn2016,Spore,Horse,Nether,ThunderRelic,Visceral,Bony,BlueTeam,Clock,Ultramarine,Cosmic,Saints,Beachside,Villager,Goblin,CorruptedNii,WaterRelic,Elf,Relic,CorruptedUth,FireRelic,Flashfire,EarthRelic,Bear,Slime,Wynnterfest2016}
// impl Sets{pub fn from_usize(n: usize) -> Result<Self,String> {match n{0 => Result::Ok(Sets::None), 1 => Result::Ok(Sets::Boundless), 2 => Result::Ok(Sets::OrnateShadow), 3 => Result::Ok(Sets::Grookwarts), 4 => Result::Ok(Sets::MasterHive), 5 => Result::Ok(Sets::ThunderHive), 6 => Result::Ok(Sets::AirHive), 7 => Result::Ok(Sets::EarthHive), 8 => Result::Ok(Sets::WaterHive), 9 => Result::Ok(Sets::FireHive), 10 => Result::Ok(Sets::SynchCore), 11 => Result::Ok(Sets::Black), 12 => Result::Ok(Sets::RedTeam), 13 => Result::Ok(Sets::Tribal), 14 => Result::Ok(Sets::Champion), 15 => Result::Ok(Sets::Outlaw), 16 => Result::Ok(Sets::Snail), 17 => Result::Ok(Sets::ThanosLegionnaire), 18 => Result::Ok(Sets::Ghostly), 19 => Result::Ok(Sets::Adventurers), 20 => Result::Ok(Sets::AirRelic), 21 => Result::Ok(Sets::Spider), 22 => Result::Ok(Sets::Pigman), 23 => Result::Ok(Sets::Kaerynns), 24 => Result::Ok(Sets::Bandits), 25 => Result::Ok(Sets::Jester), 26 => Result::Ok(Sets::Silverfish), 27 => Result::Ok(Sets::Skiens), 28 => Result::Ok(Sets::Snow), 29 => Result::Ok(Sets::Veekhats), 30 => Result::Ok(Sets::Morph), 31 => Result::Ok(Sets::BlackCatalyst), 32 => Result::Ok(Sets::Leaf), 33 => Result::Ok(Sets::Vexing), 34 => Result::Ok(Sets::Hallowynn2016), 35 => Result::Ok(Sets::Spore), 36 => Result::Ok(Sets::Horse), 37 => Result::Ok(Sets::Nether), 38 => Result::Ok(Sets::ThunderRelic), 39 => Result::Ok(Sets::Visceral), 40 => Result::Ok(Sets::Bony), 41 => Result::Ok(Sets::BlueTeam), 42 => Result::Ok(Sets::Clock), 43 => Result::Ok(Sets::Ultramarine), 44 => Result::Ok(Sets::Cosmic), 45 => Result::Ok(Sets::Saints), 46 => Result::Ok(Sets::Beachside), 47 => Result::Ok(Sets::Villager), 48 => Result::Ok(Sets::Goblin), 49 => Result::Ok(Sets::CorruptedNii), 50 => Result::Ok(Sets::WaterRelic), 51 => Result::Ok(Sets::Elf), 52 => Result::Ok(Sets::Relic), 53 => Result::Ok(Sets::CorruptedUth), 54 => Result::Ok(Sets::FireRelic), 55 => Result::Ok(Sets::Flashfire), 56 => Result::Ok(Sets::EarthRelic), 57 => Result::Ok(Sets::Bear), 58 => Result::Ok(Sets::Slime), 59 => Result::Ok(Sets::Wynnterfest2016), _ => Result::Err(String::from("Invalid number"))}}
// pub fn from_u32(n: u32) -> Result<Self,String>{match n{0 => Result::Ok(Sets::None), 1 => Result::Ok(Sets::Boundless), 2 => Result::Ok(Sets::OrnateShadow), 3 => Result::Ok(Sets::Grookwarts), 4 => Result::Ok(Sets::MasterHive), 5 => Result::Ok(Sets::ThunderHive), 6 => Result::Ok(Sets::AirHive), 7 => Result::Ok(Sets::EarthHive), 8 => Result::Ok(Sets::WaterHive), 9 => Result::Ok(Sets::FireHive), 10 => Result::Ok(Sets::SynchCore), 11 => Result::Ok(Sets::Black), 12 => Result::Ok(Sets::RedTeam), 13 => Result::Ok(Sets::Tribal), 14 => Result::Ok(Sets::Champion), 15 => Result::Ok(Sets::Outlaw), 16 => Result::Ok(Sets::Snail), 17 => Result::Ok(Sets::ThanosLegionnaire), 18 => Result::Ok(Sets::Ghostly), 19 => Result::Ok(Sets::Adventurers), 20 => Result::Ok(Sets::AirRelic), 21 => Result::Ok(Sets::Spider), 22 => Result::Ok(Sets::Pigman), 23 => Result::Ok(Sets::Kaerynns), 24 => Result::Ok(Sets::Bandits), 25 => Result::Ok(Sets::Jester), 26 => Result::Ok(Sets::Silverfish), 27 => Result::Ok(Sets::Skiens), 28 => Result::Ok(Sets::Snow), 29 => Result::Ok(Sets::Veekhats), 30 => Result::Ok(Sets::Morph), 31 => Result::Ok(Sets::BlackCatalyst), 32 => Result::Ok(Sets::Leaf), 33 => Result::Ok(Sets::Vexing), 34 => Result::Ok(Sets::Hallowynn2016), 35 => Result::Ok(Sets::Spore), 36 => Result::Ok(Sets::Horse), 37 => Result::Ok(Sets::Nether), 38 => Result::Ok(Sets::ThunderRelic), 39 => Result::Ok(Sets::Visceral), 40 => Result::Ok(Sets::Bony), 41 => Result::Ok(Sets::BlueTeam), 42 => Result::Ok(Sets::Clock), 43 => Result::Ok(Sets::Ultramarine), 44 => Result::Ok(Sets::Cosmic), 45 => Result::Ok(Sets::Saints), 46 => Result::Ok(Sets::Beachside), 47 => Result::Ok(Sets::Villager), 48 => Result::Ok(Sets::Goblin), 49 => Result::Ok(Sets::CorruptedNii), 50 => Result::Ok(Sets::WaterRelic), 51 => Result::Ok(Sets::Elf), 52 => Result::Ok(Sets::Relic), 53 => Result::Ok(Sets::CorruptedUth), 54 => Result::Ok(Sets::FireRelic), 55 => Result::Ok(Sets::Flashfire), 56 => Result::Ok(Sets::EarthRelic), 57 => Result::Ok(Sets::Bear), 58 => Result::Ok(Sets::Slime), 59 => Result::Ok(Sets::Wynnterfest2016), _ => Result::Err(String::from("Invalid number"))}}
// pub fn to_num(&self) -> usize{match self{Sets::None => 0, Sets::Boundless => 1, Sets::OrnateShadow => 2, Sets::Grookwarts => 3, Sets::MasterHive => 4, Sets::ThunderHive => 5, Sets::AirHive => 6, Sets::EarthHive => 7, Sets::WaterHive => 8, Sets::FireHive => 9, Sets::SynchCore => 10, Sets::Black => 11, Sets::RedTeam => 12, Sets::Tribal => 13, Sets::Champion => 14, Sets::Outlaw => 15, Sets::Snail => 16, Sets::ThanosLegionnaire => 17, Sets::Ghostly => 18, Sets::Adventurers => 19, Sets::AirRelic => 20, Sets::Spider => 21, Sets::Pigman => 22, Sets::Kaerynns => 23, Sets::Bandits => 24, Sets::Jester => 25, Sets::Silverfish => 26, Sets::Skiens => 27, Sets::Snow => 28, Sets::Veekhats => 29, Sets::Morph => 30, Sets::BlackCatalyst => 31, Sets::Leaf => 32, Sets::Vexing => 33, Sets::Hallowynn2016 => 34, Sets::Spore => 35, Sets::Horse => 36, Sets::Nether => 37, Sets::ThunderRelic => 38, Sets::Visceral => 39, Sets::Bony => 40, Sets::BlueTeam => 41, Sets::Clock => 42, Sets::Ultramarine => 43, Sets::Cosmic => 44, Sets::Saints => 45, Sets::Beachside => 46, Sets::Villager => 47, Sets::Goblin => 48, Sets::CorruptedNii => 49, Sets::WaterRelic => 50, Sets::Elf => 51, Sets::Relic => 52, Sets::CorruptedUth => 53, Sets::FireRelic => 54, Sets::Flashfire => 55, Sets::EarthRelic => 56, Sets::Bear => 57, Sets::Slime => 58, Sets::Wynnterfest2016 => 59, }}}
// impl fmt::Display for Sets{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{Sets::None => "None", Sets::Boundless => "Boundless", Sets::OrnateShadow => "Ornate Shadow", Sets::Grookwarts => "Grookwarts", Sets::MasterHive => "Master Hive", Sets::ThunderHive => "Thunder Hive", Sets::AirHive => "Air Hive", Sets::EarthHive => "Earth Hive", Sets::WaterHive => "Water Hive", Sets::FireHive => "Fire Hive", Sets::SynchCore => "Synch Core", Sets::Black => "Black", Sets::RedTeam => "Red Team", Sets::Tribal => "Tribal", Sets::Champion => "Champion", Sets::Outlaw => "Outlaw", Sets::Snail => "Snail", Sets::ThanosLegionnaire => "Thanos Legionnaire", Sets::Ghostly => "Ghostly", Sets::Adventurers => "Adventurer's", Sets::AirRelic => "Air Relic", Sets::Spider => "Spider", Sets::Pigman => "Pigman", Sets::Kaerynns => "Kaerynn's", Sets::Bandits => "Bandit's", Sets::Jester => "Jester", Sets::Silverfish => "Silverfish", Sets::Skiens => "Skien's", Sets::Snow => "Snow", Sets::Veekhats => "Veekhat's", Sets::Morph => "Morph", Sets::BlackCatalyst => "Black Catalyst", Sets::Leaf => "Leaf", Sets::Vexing => "Vexing", Sets::Hallowynn2016 => "Hallowynn 2016", Sets::Spore => "Spore", Sets::Horse => "Horse", Sets::Nether => "Nether", Sets::ThunderRelic => "Thunder Relic", Sets::Visceral => "Visceral", Sets::Bony => "Bony", Sets::BlueTeam => "Blue Team", Sets::Clock => "Clock", Sets::Ultramarine => "Ultramarine", Sets::Cosmic => "Cosmic", Sets::Saints => "Saint's", Sets::Beachside => "Beachside", Sets::Villager => "Villager", Sets::Goblin => "Goblin", Sets::CorruptedNii => "Corrupted Nii", Sets::WaterRelic => "Water Relic", Sets::Elf => "Elf", Sets::Relic => "Relic", Sets::CorruptedUth => "Corrupted Uth", Sets::FireRelic => "Fire Relic", Sets::Flashfire => "Flashfire", Sets::EarthRelic => "Earth Relic", Sets::Bear => "Bear", Sets::Slime => "Slime", Sets::Wynnterfest2016 => "Wynnterfest 2016", })}}
// #[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy)]
// pub enum Skill{#[default]Str,Dex,Int,Def,Agi}
// impl Skill{pub fn from_usize(n: usize) -> Result<Self,String> {match n{0 => Result::Ok(Skill::Str), 1 => Result::Ok(Skill::Dex), 2 => Result::Ok(Skill::Int), 3 => Result::Ok(Skill::Def), 4 => Result::Ok(Skill::Agi), _ => Result::Err(String::from("Invalid number"))}}
// pub fn from_u32(n: u32) -> Result<Self,String>{match n{0 => Result::Ok(Skill::Str), 1 => Result::Ok(Skill::Dex), 2 => Result::Ok(Skill::Int), 3 => Result::Ok(Skill::Def), 4 => Result::Ok(Skill::Agi), _ => Result::Err(String::from("Invalid number"))}}
// pub fn to_num(&self) -> usize{match self{Skill::Str => 0, Skill::Dex => 1, Skill::Int => 2, Skill::Def => 3, Skill::Agi => 4, }}}
// impl fmt::Display for Skill{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{Skill::Str => "Str", Skill::Dex => "Dex", Skill::Int => "Int", Skill::Def => "Def", Skill::Agi => "Agi", })}}
// #[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy)]
// pub enum DamType{#[default]Neutral,Earth,Thunder,Water,Fire,Air,Rainbow}
// impl DamType{pub fn from_usize(n: usize) -> Result<Self,String> {match n{0 => Result::Ok(DamType::Neutral), 1 => Result::Ok(DamType::Earth), 2 => Result::Ok(DamType::Thunder), 3 => Result::Ok(DamType::Water), 4 => Result::Ok(DamType::Fire), 5 => Result::Ok(DamType::Air), 6 => Result::Ok(DamType::Rainbow), _ => Result::Err(String::from("Invalid number"))}}
// pub fn from_u32(n: u32) -> Result<Self,String>{match n{0 => Result::Ok(DamType::Neutral), 1 => Result::Ok(DamType::Earth), 2 => Result::Ok(DamType::Thunder), 3 => Result::Ok(DamType::Water), 4 => Result::Ok(DamType::Fire), 5 => Result::Ok(DamType::Air), 6 => Result::Ok(DamType::Rainbow), _ => Result::Err(String::from("Invalid number"))}}
// pub fn to_num(&self) -> usize{match self{DamType::Neutral => 0, DamType::Earth => 1, DamType::Thunder => 2, DamType::Water => 3, DamType::Fire => 4, DamType::Air => 5, DamType::Rainbow => 6, }}}
// impl fmt::Display for DamType{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{DamType::Neutral => "Neutral", DamType::Earth => "Earth", DamType::Thunder => "Thunder", DamType::Water => "Water", DamType::Fire => "Fire", DamType::Air => "Air", DamType::Rainbow => "Rainbow", })}}
// #[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy)]
// pub enum Atrs{#[default]Type,Tier,Lvl,Category,Id,FixID,AtkSpd,Slots,Restrict,MajorIds,AllowCraftsman,ClassReq,Set,StrReq,DexReq,IntReq,DefReq,AgiReq,Str,Dex,Int,Def,Agi,NDam,EDam,TDam,WDam,FDam,ADam,Hp,EDef,TDef,WDef,FDef,ADef,NDamPct,EDamPct,TDamPct,WDamPct,FDamPct,ADamPct,RDamPct,EDefPct,TDefPct,WDefPct,FDefPct,ADefPct,RDefPct,NSdRaw,ESdRaw,TSdRaw,WSdRaw,FSdRaw,ASdRaw,RSdRaw,NSdPct,ESdPct,TSdPct,WSdPct,FSdPct,ASdPct,RSdPct,NMdRaw,EMdRaw,TMdRaw,WMdRaw,FMdRaw,AMdRaw,RMdRaw,NDamRaw,EDamRaw,TDamRaw,WDamRaw,FDamRaw,ADamRaw,RDamRaw,NMdPct,EMdPct,TMdPct,WMdPct,FMdPct,AMdPct,RMdPct,HprPct,Mr,Expd,HpBonus,Spd,SpRegen,MdPct,SdPct,HprRaw,Ls,Poison,ESteal,SdRaw,Xpb,Lb,MdRaw,SprintReg,Thorns,AtkTier,Jh,Ref,Ms,SpPct2,SpPct3,SpRaw1,SpRaw2,SpPct1,Sprint,SpPct4,SpRaw3,SpRaw4,HealPct,WeakenEnemy,Kb,SlowEnemy}
// impl Atrs{pub fn from_usize(n: usize) -> Result<Self,String> {match n{0 => Result::Ok(Atrs::Type), 1 => Result::Ok(Atrs::Tier), 2 => Result::Ok(Atrs::Lvl), 3 => Result::Ok(Atrs::Category), 4 => Result::Ok(Atrs::Id), 5 => Result::Ok(Atrs::FixID), 6 => Result::Ok(Atrs::AtkSpd), 7 => Result::Ok(Atrs::Slots), 8 => Result::Ok(Atrs::Restrict), 9 => Result::Ok(Atrs::MajorIds), 10 => Result::Ok(Atrs::AllowCraftsman), 11 => Result::Ok(Atrs::ClassReq), 12 => Result::Ok(Atrs::Set), 13 => Result::Ok(Atrs::StrReq), 14 => Result::Ok(Atrs::DexReq), 15 => Result::Ok(Atrs::IntReq), 16 => Result::Ok(Atrs::DefReq), 17 => Result::Ok(Atrs::AgiReq), 18 => Result::Ok(Atrs::Str), 19 => Result::Ok(Atrs::Dex), 20 => Result::Ok(Atrs::Int), 21 => Result::Ok(Atrs::Def), 22 => Result::Ok(Atrs::Agi), 23 => Result::Ok(Atrs::NDam), 24 => Result::Ok(Atrs::EDam), 25 => Result::Ok(Atrs::TDam), 26 => Result::Ok(Atrs::WDam), 27 => Result::Ok(Atrs::FDam), 28 => Result::Ok(Atrs::ADam), 29 => Result::Ok(Atrs::Hp), 30 => Result::Ok(Atrs::EDef), 31 => Result::Ok(Atrs::TDef), 32 => Result::Ok(Atrs::WDef), 33 => Result::Ok(Atrs::FDef), 34 => Result::Ok(Atrs::ADef), 35 => Result::Ok(Atrs::NDamPct), 36 => Result::Ok(Atrs::EDamPct), 37 => Result::Ok(Atrs::TDamPct), 38 => Result::Ok(Atrs::WDamPct), 39 => Result::Ok(Atrs::FDamPct), 40 => Result::Ok(Atrs::ADamPct), 41 => Result::Ok(Atrs::RDamPct), 42 => Result::Ok(Atrs::EDefPct), 43 => Result::Ok(Atrs::TDefPct), 44 => Result::Ok(Atrs::WDefPct), 45 => Result::Ok(Atrs::FDefPct), 46 => Result::Ok(Atrs::ADefPct), 47 => Result::Ok(Atrs::RDefPct), 48 => Result::Ok(Atrs::NSdRaw), 49 => Result::Ok(Atrs::ESdRaw), 50 => Result::Ok(Atrs::TSdRaw), 51 => Result::Ok(Atrs::WSdRaw), 52 => Result::Ok(Atrs::FSdRaw), 53 => Result::Ok(Atrs::ASdRaw), 54 => Result::Ok(Atrs::RSdRaw), 55 => Result::Ok(Atrs::NSdPct), 56 => Result::Ok(Atrs::ESdPct), 57 => Result::Ok(Atrs::TSdPct), 58 => Result::Ok(Atrs::WSdPct), 59 => Result::Ok(Atrs::FSdPct), 60 => Result::Ok(Atrs::ASdPct), 61 => Result::Ok(Atrs::RSdPct), 62 => Result::Ok(Atrs::NMdRaw), 63 => Result::Ok(Atrs::EMdRaw), 64 => Result::Ok(Atrs::TMdRaw), 65 => Result::Ok(Atrs::WMdRaw), 66 => Result::Ok(Atrs::FMdRaw), 67 => Result::Ok(Atrs::AMdRaw), 68 => Result::Ok(Atrs::RMdRaw), 69 => Result::Ok(Atrs::NDamRaw), 70 => Result::Ok(Atrs::EDamRaw), 71 => Result::Ok(Atrs::TDamRaw), 72 => Result::Ok(Atrs::WDamRaw), 73 => Result::Ok(Atrs::FDamRaw), 74 => Result::Ok(Atrs::ADamRaw), 75 => Result::Ok(Atrs::RDamRaw), 76 => Result::Ok(Atrs::NMdPct), 77 => Result::Ok(Atrs::EMdPct), 78 => Result::Ok(Atrs::TMdPct), 79 => Result::Ok(Atrs::WMdPct), 80 => Result::Ok(Atrs::FMdPct), 81 => Result::Ok(Atrs::AMdPct), 82 => Result::Ok(Atrs::RMdPct), 83 => Result::Ok(Atrs::HprPct), 84 => Result::Ok(Atrs::Mr), 85 => Result::Ok(Atrs::Expd), 86 => Result::Ok(Atrs::HpBonus), 87 => Result::Ok(Atrs::Spd), 88 => Result::Ok(Atrs::SpRegen), 89 => Result::Ok(Atrs::MdPct), 90 => Result::Ok(Atrs::SdPct), 91 => Result::Ok(Atrs::HprRaw), 92 => Result::Ok(Atrs::Ls), 93 => Result::Ok(Atrs::Poison), 94 => Result::Ok(Atrs::ESteal), 95 => Result::Ok(Atrs::SdRaw), 96 => Result::Ok(Atrs::Xpb), 97 => Result::Ok(Atrs::Lb), 98 => Result::Ok(Atrs::MdRaw), 99 => Result::Ok(Atrs::SprintReg), 100 => Result::Ok(Atrs::Thorns), 101 => Result::Ok(Atrs::AtkTier), 102 => Result::Ok(Atrs::Jh), 103 => Result::Ok(Atrs::Ref), 104 => Result::Ok(Atrs::Ms), 105 => Result::Ok(Atrs::SpPct2), 106 => Result::Ok(Atrs::SpPct3), 107 => Result::Ok(Atrs::SpRaw1), 108 => Result::Ok(Atrs::SpRaw2), 109 => Result::Ok(Atrs::SpPct1), 110 => Result::Ok(Atrs::Sprint), 111 => Result::Ok(Atrs::SpPct4), 112 => Result::Ok(Atrs::SpRaw3), 113 => Result::Ok(Atrs::SpRaw4), 114 => Result::Ok(Atrs::HealPct), 115 => Result::Ok(Atrs::WeakenEnemy), 116 => Result::Ok(Atrs::Kb), 117 => Result::Ok(Atrs::SlowEnemy), _ => Result::Err(String::from("Invalid number"))}}
// pub fn from_u32(n: u32) -> Result<Self,String>{match n{0 => Result::Ok(Atrs::Type), 1 => Result::Ok(Atrs::Tier), 2 => Result::Ok(Atrs::Lvl), 3 => Result::Ok(Atrs::Category), 4 => Result::Ok(Atrs::Id), 5 => Result::Ok(Atrs::FixID), 6 => Result::Ok(Atrs::AtkSpd), 7 => Result::Ok(Atrs::Slots), 8 => Result::Ok(Atrs::Restrict), 9 => Result::Ok(Atrs::MajorIds), 10 => Result::Ok(Atrs::AllowCraftsman), 11 => Result::Ok(Atrs::ClassReq), 12 => Result::Ok(Atrs::Set), 13 => Result::Ok(Atrs::StrReq), 14 => Result::Ok(Atrs::DexReq), 15 => Result::Ok(Atrs::IntReq), 16 => Result::Ok(Atrs::DefReq), 17 => Result::Ok(Atrs::AgiReq), 18 => Result::Ok(Atrs::Str), 19 => Result::Ok(Atrs::Dex), 20 => Result::Ok(Atrs::Int), 21 => Result::Ok(Atrs::Def), 22 => Result::Ok(Atrs::Agi), 23 => Result::Ok(Atrs::NDam), 24 => Result::Ok(Atrs::EDam), 25 => Result::Ok(Atrs::TDam), 26 => Result::Ok(Atrs::WDam), 27 => Result::Ok(Atrs::FDam), 28 => Result::Ok(Atrs::ADam), 29 => Result::Ok(Atrs::Hp), 30 => Result::Ok(Atrs::EDef), 31 => Result::Ok(Atrs::TDef), 32 => Result::Ok(Atrs::WDef), 33 => Result::Ok(Atrs::FDef), 34 => Result::Ok(Atrs::ADef), 35 => Result::Ok(Atrs::NDamPct), 36 => Result::Ok(Atrs::EDamPct), 37 => Result::Ok(Atrs::TDamPct), 38 => Result::Ok(Atrs::WDamPct), 39 => Result::Ok(Atrs::FDamPct), 40 => Result::Ok(Atrs::ADamPct), 41 => Result::Ok(Atrs::RDamPct), 42 => Result::Ok(Atrs::EDefPct), 43 => Result::Ok(Atrs::TDefPct), 44 => Result::Ok(Atrs::WDefPct), 45 => Result::Ok(Atrs::FDefPct), 46 => Result::Ok(Atrs::ADefPct), 47 => Result::Ok(Atrs::RDefPct), 48 => Result::Ok(Atrs::NSdRaw), 49 => Result::Ok(Atrs::ESdRaw), 50 => Result::Ok(Atrs::TSdRaw), 51 => Result::Ok(Atrs::WSdRaw), 52 => Result::Ok(Atrs::FSdRaw), 53 => Result::Ok(Atrs::ASdRaw), 54 => Result::Ok(Atrs::RSdRaw), 55 => Result::Ok(Atrs::NSdPct), 56 => Result::Ok(Atrs::ESdPct), 57 => Result::Ok(Atrs::TSdPct), 58 => Result::Ok(Atrs::WSdPct), 59 => Result::Ok(Atrs::FSdPct), 60 => Result::Ok(Atrs::ASdPct), 61 => Result::Ok(Atrs::RSdPct), 62 => Result::Ok(Atrs::NMdRaw), 63 => Result::Ok(Atrs::EMdRaw), 64 => Result::Ok(Atrs::TMdRaw), 65 => Result::Ok(Atrs::WMdRaw), 66 => Result::Ok(Atrs::FMdRaw), 67 => Result::Ok(Atrs::AMdRaw), 68 => Result::Ok(Atrs::RMdRaw), 69 => Result::Ok(Atrs::NDamRaw), 70 => Result::Ok(Atrs::EDamRaw), 71 => Result::Ok(Atrs::TDamRaw), 72 => Result::Ok(Atrs::WDamRaw), 73 => Result::Ok(Atrs::FDamRaw), 74 => Result::Ok(Atrs::ADamRaw), 75 => Result::Ok(Atrs::RDamRaw), 76 => Result::Ok(Atrs::NMdPct), 77 => Result::Ok(Atrs::EMdPct), 78 => Result::Ok(Atrs::TMdPct), 79 => Result::Ok(Atrs::WMdPct), 80 => Result::Ok(Atrs::FMdPct), 81 => Result::Ok(Atrs::AMdPct), 82 => Result::Ok(Atrs::RMdPct), 83 => Result::Ok(Atrs::HprPct), 84 => Result::Ok(Atrs::Mr), 85 => Result::Ok(Atrs::Expd), 86 => Result::Ok(Atrs::HpBonus), 87 => Result::Ok(Atrs::Spd), 88 => Result::Ok(Atrs::SpRegen), 89 => Result::Ok(Atrs::MdPct), 90 => Result::Ok(Atrs::SdPct), 91 => Result::Ok(Atrs::HprRaw), 92 => Result::Ok(Atrs::Ls), 93 => Result::Ok(Atrs::Poison), 94 => Result::Ok(Atrs::ESteal), 95 => Result::Ok(Atrs::SdRaw), 96 => Result::Ok(Atrs::Xpb), 97 => Result::Ok(Atrs::Lb), 98 => Result::Ok(Atrs::MdRaw), 99 => Result::Ok(Atrs::SprintReg), 100 => Result::Ok(Atrs::Thorns), 101 => Result::Ok(Atrs::AtkTier), 102 => Result::Ok(Atrs::Jh), 103 => Result::Ok(Atrs::Ref), 104 => Result::Ok(Atrs::Ms), 105 => Result::Ok(Atrs::SpPct2), 106 => Result::Ok(Atrs::SpPct3), 107 => Result::Ok(Atrs::SpRaw1), 108 => Result::Ok(Atrs::SpRaw2), 109 => Result::Ok(Atrs::SpPct1), 110 => Result::Ok(Atrs::Sprint), 111 => Result::Ok(Atrs::SpPct4), 112 => Result::Ok(Atrs::SpRaw3), 113 => Result::Ok(Atrs::SpRaw4), 114 => Result::Ok(Atrs::HealPct), 115 => Result::Ok(Atrs::WeakenEnemy), 116 => Result::Ok(Atrs::Kb), 117 => Result::Ok(Atrs::SlowEnemy), _ => Result::Err(String::from("Invalid number"))}}
// pub fn to_num(&self) -> usize{match self{Atrs::Type => 0, Atrs::Tier => 1, Atrs::Lvl => 2, Atrs::Category => 3, Atrs::Id => 4, Atrs::FixID => 5, Atrs::AtkSpd => 6, Atrs::Slots => 7, Atrs::Restrict => 8, Atrs::MajorIds => 9, Atrs::AllowCraftsman => 10, Atrs::ClassReq => 11, Atrs::Set => 12, Atrs::StrReq => 13, Atrs::DexReq => 14, Atrs::IntReq => 15, Atrs::DefReq => 16, Atrs::AgiReq => 17, Atrs::Str => 18, Atrs::Dex => 19, Atrs::Int => 20, Atrs::Def => 21, Atrs::Agi => 22, Atrs::NDam => 23, Atrs::EDam => 24, Atrs::TDam => 25, Atrs::WDam => 26, Atrs::FDam => 27, Atrs::ADam => 28, Atrs::Hp => 29, Atrs::EDef => 30, Atrs::TDef => 31, Atrs::WDef => 32, Atrs::FDef => 33, Atrs::ADef => 34, Atrs::NDamPct => 35, Atrs::EDamPct => 36, Atrs::TDamPct => 37, Atrs::WDamPct => 38, Atrs::FDamPct => 39, Atrs::ADamPct => 40, Atrs::RDamPct => 41, Atrs::EDefPct => 42, Atrs::TDefPct => 43, Atrs::WDefPct => 44, Atrs::FDefPct => 45, Atrs::ADefPct => 46, Atrs::RDefPct => 47, Atrs::NSdRaw => 48, Atrs::ESdRaw => 49, Atrs::TSdRaw => 50, Atrs::WSdRaw => 51, Atrs::FSdRaw => 52, Atrs::ASdRaw => 53, Atrs::RSdRaw => 54, Atrs::NSdPct => 55, Atrs::ESdPct => 56, Atrs::TSdPct => 57, Atrs::WSdPct => 58, Atrs::FSdPct => 59, Atrs::ASdPct => 60, Atrs::RSdPct => 61, Atrs::NMdRaw => 62, Atrs::EMdRaw => 63, Atrs::TMdRaw => 64, Atrs::WMdRaw => 65, Atrs::FMdRaw => 66, Atrs::AMdRaw => 67, Atrs::RMdRaw => 68, Atrs::NDamRaw => 69, Atrs::EDamRaw => 70, Atrs::TDamRaw => 71, Atrs::WDamRaw => 72, Atrs::FDamRaw => 73, Atrs::ADamRaw => 74, Atrs::RDamRaw => 75, Atrs::NMdPct => 76, Atrs::EMdPct => 77, Atrs::TMdPct => 78, Atrs::WMdPct => 79, Atrs::FMdPct => 80, Atrs::AMdPct => 81, Atrs::RMdPct => 82, Atrs::HprPct => 83, Atrs::Mr => 84, Atrs::Expd => 85, Atrs::HpBonus => 86, Atrs::Spd => 87, Atrs::SpRegen => 88, Atrs::MdPct => 89, Atrs::SdPct => 90, Atrs::HprRaw => 91, Atrs::Ls => 92, Atrs::Poison => 93, Atrs::ESteal => 94, Atrs::SdRaw => 95, Atrs::Xpb => 96, Atrs::Lb => 97, Atrs::MdRaw => 98, Atrs::SprintReg => 99, Atrs::Thorns => 100, Atrs::AtkTier => 101, Atrs::Jh => 102, Atrs::Ref => 103, Atrs::Ms => 104, Atrs::SpPct2 => 105, Atrs::SpPct3 => 106, Atrs::SpRaw1 => 107, Atrs::SpRaw2 => 108, Atrs::SpPct1 => 109, Atrs::Sprint => 110, Atrs::SpPct4 => 111, Atrs::SpRaw3 => 112, Atrs::SpRaw4 => 113, Atrs::HealPct => 114, Atrs::WeakenEnemy => 115, Atrs::Kb => 116, Atrs::SlowEnemy => 117, }}}
// impl fmt::Display for Atrs{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{Atrs::Type => "type", Atrs::Tier => "tier", Atrs::Lvl => "lvl", Atrs::Category => "category", Atrs::Id => "id", Atrs::FixID => "fixID", Atrs::AtkSpd => "atkSpd", Atrs::Slots => "slots", Atrs::Restrict => "restrict", Atrs::MajorIds => "majorIds", Atrs::AllowCraftsman => "allowCraftsman", Atrs::ClassReq => "classReq", Atrs::Set => "set", Atrs::StrReq => "strReq", Atrs::DexReq => "dexReq", Atrs::IntReq => "intReq", Atrs::DefReq => "defReq", Atrs::AgiReq => "agiReq", Atrs::Str => "str", Atrs::Dex => "dex", Atrs::Int => "int", Atrs::Def => "def", Atrs::Agi => "agi", Atrs::NDam => "nDam", Atrs::EDam => "eDam", Atrs::TDam => "tDam", Atrs::WDam => "wDam", Atrs::FDam => "fDam", Atrs::ADam => "aDam", Atrs::Hp => "hp", Atrs::EDef => "eDef", Atrs::TDef => "tDef", Atrs::WDef => "wDef", Atrs::FDef => "fDef", Atrs::ADef => "aDef", Atrs::NDamPct => "nDamPct", Atrs::EDamPct => "eDamPct", Atrs::TDamPct => "tDamPct", Atrs::WDamPct => "wDamPct", Atrs::FDamPct => "fDamPct", Atrs::ADamPct => "aDamPct", Atrs::RDamPct => "rDamPct", Atrs::EDefPct => "eDefPct", Atrs::TDefPct => "tDefPct", Atrs::WDefPct => "wDefPct", Atrs::FDefPct => "fDefPct", Atrs::ADefPct => "aDefPct", Atrs::RDefPct => "rDefPct", Atrs::NSdRaw => "nSdRaw", Atrs::ESdRaw => "eSdRaw", Atrs::TSdRaw => "tSdRaw", Atrs::WSdRaw => "wSdRaw", Atrs::FSdRaw => "fSdRaw", Atrs::ASdRaw => "aSdRaw", Atrs::RSdRaw => "rSdRaw", Atrs::NSdPct => "nSdPct", Atrs::ESdPct => "eSdPct", Atrs::TSdPct => "tSdPct", Atrs::WSdPct => "wSdPct", Atrs::FSdPct => "fSdPct", Atrs::ASdPct => "aSdPct", Atrs::RSdPct => "rSdPct", Atrs::NMdRaw => "nMdRaw", Atrs::EMdRaw => "eMdRaw", Atrs::TMdRaw => "tMdRaw", Atrs::WMdRaw => "wMdRaw", Atrs::FMdRaw => "fMdRaw", Atrs::AMdRaw => "aMdRaw", Atrs::RMdRaw => "rMdRaw", Atrs::NDamRaw => "nDamRaw", Atrs::EDamRaw => "eDamRaw", Atrs::TDamRaw => "tDamRaw", Atrs::WDamRaw => "wDamRaw", Atrs::FDamRaw => "fDamRaw", Atrs::ADamRaw => "aDamRaw", Atrs::RDamRaw => "rDamRaw", Atrs::NMdPct => "nMdPct", Atrs::EMdPct => "eMdPct", Atrs::TMdPct => "tMdPct", Atrs::WMdPct => "wMdPct", Atrs::FMdPct => "fMdPct", Atrs::AMdPct => "aMdPct", Atrs::RMdPct => "rMdPct", Atrs::HprPct => "hprPct", Atrs::Mr => "mr", Atrs::Expd => "expd", Atrs::HpBonus => "hpBonus", Atrs::Spd => "spd", Atrs::SpRegen => "spRegen", Atrs::MdPct => "mdPct", Atrs::SdPct => "sdPct", Atrs::HprRaw => "hprRaw", Atrs::Ls => "ls", Atrs::Poison => "poison", Atrs::ESteal => "eSteal", Atrs::SdRaw => "sdRaw", Atrs::Xpb => "xpb", Atrs::Lb => "lb", Atrs::MdRaw => "mdRaw", Atrs::SprintReg => "sprintReg", Atrs::Thorns => "thorns", Atrs::AtkTier => "atkTier", Atrs::Jh => "jh", Atrs::Ref => "ref", Atrs::Ms => "ms", Atrs::SpPct2 => "spPct2", Atrs::SpPct3 => "spPct3", Atrs::SpRaw1 => "spRaw1", Atrs::SpRaw2 => "spRaw2", Atrs::SpPct1 => "spPct1", Atrs::Sprint => "sprint", Atrs::SpPct4 => "spPct4", Atrs::SpRaw3 => "spRaw3", Atrs::SpRaw4 => "spRaw4", Atrs::HealPct => "healPct", Atrs::WeakenEnemy => "weakenEnemy", Atrs::Kb => "kb", Atrs::SlowEnemy => "slowEnemy", })}}
// struct WynnItemData<'a>{name: &'a str, sps_req_data: i64, sps_bonus_data: i64, partitions: (usize,usize,usize,usize), data: &'a [u32]}impl <'a>WynnItemData<'a>{fn data_atr(&self, idx: usize) -> u32{parse_data_atr(self.data[idx])} fn data_ival(&self, idx: usize) -> i32{parse_data_i32(self.data[idx])} fn data_uval(&self, idx: usize) -> u32{parse_data_u32(self.data[idx])}}
// #[derive(Clone)]
// pub struct WynnItem{item: &'static WynnItemData<'static>, quality: f32} impl WynnItem{pub fn null() -> WynnItem{WynnItem{item: items_list::ALL_ITEMS[0], quality: 1.0}} pub fn from(idx: usize) -> WynnItem{let item = items_list::ALL_ITEMS[idx]; WynnItem{item: &items_list::ALL_ITEMS[idx],quality:1.0}}pub fn get_type(&self) -> Type{Type::from_u32(if self.is_null(){7}else{self.item.data_uval(0)}).unwrap_or(Type::Helmet)}pub fn get_category(&self) -> Category{Category::from_u32(if self.is_null(){0}else{self.item.data_uval(3)}).unwrap_or(Category::Armor)}pub fn is_null(&self) -> bool{self.item.data.is_empty()}pub fn fixed_id(&self) -> bool{self.item.data.len()>=6&&self.item.data_atr(5)==5}pub fn name(&self) -> &str{self.item.name}pub fn atk_spd(&self)->AtkSpd{if self.item.data_atr(5.min(self.item.data.len()-1))==6{AtkSpd::from_u32(self.item.data_uval(5)).unwrap_or(AtkSpd::Normal)}else if self.item.data_atr(6.min(self.item.data.len()-1))==6{AtkSpd::from_u32(self.item.data_uval(6)).unwrap_or(AtkSpd::Normal)}else{AtkSpd::Normal}}pub fn get_tier(&self)->Tier{Tier::from_u32(if self.is_null(){0}else{self.item.data_uval(1)}).unwrap_or(Tier::Common)}fn calc_id(&self, idx: usize)->i32{let base_value = self.item.data_ival(idx); if self.fixed_id()||self.item.data_atr(idx)<=34{base_value}else if base_value>0 {(base_value as f32*(self.quality+0.3)).round() as i32}else{(base_value as f32*((1.0-self.quality)*0.6+0.7)+4.000001*f32::EPSILON).round() as i32}}pub fn get_hash(&self) -> String{url_hash_val(self.item.data_ival(4),3)}fn get_data_i32(&self, idx: usize) -> Option<(Atrs,i32)>{if idx>=self.item.data.len(){None}else{Some((Atrs::from_u32(self.item.data_atr(idx)).unwrap(),self.calc_id(idx)))}}pub fn get_ident(&self,ident: Atrs)->Option<i32>{let id_u32 = ident as u32; match self.item.data.binary_search(&(id_u32<<24)){Ok(n) => Some(self.calc_id(n)),Err(n) => if n>=self.item.data.len()||self.item.data_atr(n)!=id_u32{None}else{Some(self.calc_id(n))}}}pub fn get_set(&self)->Sets{if self.item.data_atr((self.item.partitions.0-1).min(self.item.data.len()-1))==12{Sets::from_u32(self.item.data_uval(self.item.partitions.0-1)).unwrap_or(Sets::None)}else{Sets::None}}pub fn set_quality(&mut self, qual: f32){self.quality=qual}pub fn iter_ids(&self) -> I32AtrsIter<'_>{I32AtrsIter{data:self.item.data,curr:self.item.partitions.3,end:self.item.data.len()}}pub fn iter_data(&self) -> I32AtrsIter<'_>{I32AtrsIter{data:self.item.data,curr:0,end:self.item.data.len()}}pub fn iter_skill_reqs(&self) -> I32AtrsIter<'_>{I32AtrsIter{data:self.item.data,curr:self.item.partitions.0,end:self.item.partitions.1}}pub fn iter_skill_bonus(&self) -> I32AtrsIter<'_>{I32AtrsIter{data:self.item.data,curr:self.item.partitions.1,end:self.item.partitions.2}}pub fn iter_damages(&self) -> DamsIter<'_>{DamsIter{item:self,curr:self.item.partitions.2,end:self.item.partitions.3}}
// /// Iterates over the skill requirements *and* skill bonuses for the item.
// ///
// /// The iterator yields a tuple of the form (skill: Skill, requirement: i32, bonus: i32)
// pub fn iter_skills(&self) -> SkillsIter<'_>{SkillsIter{item:self,req_idx:self.item.partitions.0,req_end_idx:self.item.partitions.1,bonus_idx:self.item.partitions.1,bonus_end_idx:self.item.partitions.2}}}
// pub struct I32AtrsIter<'a>{data: &'a [u32], curr: usize, end: usize}impl Iterator for I32AtrsIter<'_>{type Item = (Atrs, i32);fn next(&mut self)->Option<Self::Item>{if self.curr>=self.end{return None}let res = (Atrs::from_u32(parse_data_atr(self.data[self.curr])).unwrap_or_default(),parse_data_i32(self.data[self.curr]));self.curr+=1;Some(res)}}
// pub struct DamsIter<'a>{item: &'a WynnItem, curr: usize, end: usize} impl Iterator for DamsIter<'_>{type Item = (DamType, (u32,u32)); fn next(&mut self) -> Option<Self::Item>{if self.curr>=self.end||self.curr>=self.item.item.data.len(){return None}; let dam_data = self.item.item.data[self.curr];let res = (DamType::from_u32(self.item.item.data_atr(self.curr)-23).unwrap_or(DamType::Neutral),(dam_data&0xFFF,(dam_data&0xFFF000)>>12)); self.curr+=1; Some(res)}}
// pub struct SkillsIter<'a>{item: &'a WynnItem, req_idx: usize, bonus_idx: usize, req_end_idx: usize, bonus_end_idx: usize}impl Iterator for SkillsIter<'_>{type Item = (Skill,i32,i32);fn next(&mut self) -> Option<Self::Item>{if self.req_idx>=self.req_end_idx&&self.bonus_idx>=self.bonus_end_idx{return None}; let req = if self.req_idx<self.item.item.data.len(){self.item.item.data_atr(self.req_idx)-13}else{6}; let bon=if self.bonus_idx<self.item.item.data.len(){self.item.item.data_atr(self.bonus_idx)-18}else{6}; let mut res = (Skill::from_u32(req.min(bon)).unwrap_or(Skill::Str),0,0); if req<bon{res.1=self.item.item.data_ival(self.req_idx); self.req_idx+=1;} else if req>bon{res.2=self.item.item.data_ival(self.bonus_idx); self.bonus_idx+=1;} else {res.1=self.item.item.data_ival(self.req_idx);self.req_idx+=1;res.2=self.item.item.data_ival(self.bonus_idx);self.bonus_idx+=1;}Some(res)}}
