//! This file is autogenerated by rs_generator.py.<br>Code in this file uses wynncraft item data from [wynnbuilder's github repo](https://raw.githubusercontent.com/hppeng-wynn/hppeng-wynn.github.io/dev/data/2.0.4.3/items.json)
use core::fmt;use crate::wynn_data::{WynnEnum,TryIntoWynnEnumError};use crate::enum_from_into;
#[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy,Debug)]
pub enum Class{#[default]Archer,Warrior,Mage,Assassin,Shaman}
impl WynnEnum for Class{const VARIENTS:&'static[Self]=&[Self::Archer,Self::Warrior,Self::Mage,Self::Assassin,Self::Shaman];}impl std::convert::TryFrom<u8> for Class{type Error=TryIntoWynnEnumError<u8,Self>;fn try_from(n: u8) -> Result<Self,Self::Error> {match n{0 => Ok(Class::Archer), 1 => Ok(Class::Warrior), 2 => Ok(Class::Mage), 3 => Ok(Class::Assassin), 4 => Ok(Class::Shaman), _ => Err(TryIntoWynnEnumError{from: n, to: Self::default()})}}}
impl fmt::Display for Class{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{Class::Archer => "Archer", Class::Warrior => "Warrior", Class::Mage => "Mage", Class::Assassin => "Assassin", Class::Shaman => "Shaman", })}}enum_from_into!(Class, u8,u32,u64,i32,i64,usize);
#[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy,Debug)]
pub enum DamType{#[default]Neutral,Earth,Thunder,Water,Fire,Air,Rainbow}
impl WynnEnum for DamType{const VARIENTS:&'static[Self]=&[Self::Neutral,Self::Earth,Self::Thunder,Self::Water,Self::Fire,Self::Air,Self::Rainbow];}impl std::convert::TryFrom<u8> for DamType{type Error=TryIntoWynnEnumError<u8,Self>;fn try_from(n: u8) -> Result<Self,Self::Error> {match n{0 => Ok(DamType::Neutral), 1 => Ok(DamType::Earth), 2 => Ok(DamType::Thunder), 3 => Ok(DamType::Water), 4 => Ok(DamType::Fire), 5 => Ok(DamType::Air), 6 => Ok(DamType::Rainbow), _ => Err(TryIntoWynnEnumError{from: n, to: Self::default()})}}}
impl fmt::Display for DamType{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{DamType::Neutral => "Neutral", DamType::Earth => "Earth", DamType::Thunder => "Thunder", DamType::Water => "Water", DamType::Fire => "Fire", DamType::Air => "Air", DamType::Rainbow => "Rainbow", })}}enum_from_into!(DamType, u8,u32,u64,i32,i64,usize);
#[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy,Debug)]
pub enum Skill{#[default]Str,Dex,Int,Def,Agi}
impl WynnEnum for Skill{const VARIENTS:&'static[Self]=&[Self::Str,Self::Dex,Self::Int,Self::Def,Self::Agi];}impl std::convert::TryFrom<u8> for Skill{type Error=TryIntoWynnEnumError<u8,Self>;fn try_from(n: u8) -> Result<Self,Self::Error> {match n{0 => Ok(Skill::Str), 1 => Ok(Skill::Dex), 2 => Ok(Skill::Int), 3 => Ok(Skill::Def), 4 => Ok(Skill::Agi), _ => Err(TryIntoWynnEnumError{from: n, to: Self::default()})}}}
impl fmt::Display for Skill{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{Skill::Str => "Str", Skill::Dex => "Dex", Skill::Int => "Int", Skill::Def => "Def", Skill::Agi => "Agi", })}}enum_from_into!(Skill, u8,u32,u64,i32,i64,usize);
impl super::TryIntoI12x5Idx for Skill{type Error = String;fn try_into(self) -> Result<super::I12x5Idx, Self::Error> {Ok(match self{Self::Str => super::I12x5Idx::_0,Self::Dex => super::I12x5Idx::_1,Self::Int => super::I12x5Idx::_2,Self::Def => super::I12x5Idx::_3,Self::Agi => super::I12x5Idx::_4})}}