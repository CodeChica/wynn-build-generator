//! This file is autogenerated by rs_generator.py.<br>Code in this file uses wynncraft item data from [wynnbuilder's github repo](https://raw.githubusercontent.com/hppeng-wynn/hppeng-wynn.github.io/dev/data/2.0.4.3/items.json)
use core::fmt;use crate::wynn_data::{WynnEnum,TryIntoWynnEnumError};use crate::enum_from_into;
#[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy,Debug)]
pub enum Type{#[default]Helmet,Chestplate,Leggings,Boots,Ring,Bracelet,Necklace,Bow,Spear,Wand,Dagger,Relik}
impl WynnEnum for Type{const VARIENTS:&'static[Self]=&[Self::Helmet,Self::Chestplate,Self::Leggings,Self::Boots,Self::Ring,Self::Bracelet,Self::Necklace,Self::Bow,Self::Spear,Self::Wand,Self::Dagger,Self::Relik];const ENUM_TYPE_ID:u8=3;}impl std::convert::TryFrom<u8> for Type{type Error=TryIntoWynnEnumError<u8,Self>;fn try_from(n: u8) -> Result<Self,Self::Error> {match n{0 => Ok(Type::Helmet), 1 => Ok(Type::Chestplate), 2 => Ok(Type::Leggings), 3 => Ok(Type::Boots), 4 => Ok(Type::Ring), 5 => Ok(Type::Bracelet), 6 => Ok(Type::Necklace), 7 => Ok(Type::Bow), 8 => Ok(Type::Spear), 9 => Ok(Type::Wand), 10 => Ok(Type::Dagger), 11 => Ok(Type::Relik), _ => Err(TryIntoWynnEnumError{from: n, to: Self::default()})}}}
impl fmt::Display for Type{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{Type::Helmet => "Helmet", Type::Chestplate => "Chestplate", Type::Leggings => "Leggings", Type::Boots => "Boots", Type::Ring => "Ring", Type::Bracelet => "Bracelet", Type::Necklace => "Necklace", Type::Bow => "Bow", Type::Spear => "Spear", Type::Wand => "Wand", Type::Dagger => "Dagger", Type::Relik => "Relik", })}}enum_from_into!(Type, u8,u32,u64,i32,i64,usize);
#[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy,Debug)]
pub enum Tier{#[default]Common,Unique,Rare,Legendary,Set,Fabled,Mythic}
impl WynnEnum for Tier{const VARIENTS:&'static[Self]=&[Self::Common,Self::Unique,Self::Rare,Self::Legendary,Self::Set,Self::Fabled,Self::Mythic];const ENUM_TYPE_ID:u8=4;}impl std::convert::TryFrom<u8> for Tier{type Error=TryIntoWynnEnumError<u8,Self>;fn try_from(n: u8) -> Result<Self,Self::Error> {match n{0 => Ok(Tier::Common), 1 => Ok(Tier::Unique), 2 => Ok(Tier::Rare), 3 => Ok(Tier::Legendary), 4 => Ok(Tier::Set), 5 => Ok(Tier::Fabled), 6 => Ok(Tier::Mythic), _ => Err(TryIntoWynnEnumError{from: n, to: Self::default()})}}}
impl fmt::Display for Tier{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{Tier::Common => "Common", Tier::Unique => "Unique", Tier::Rare => "Rare", Tier::Legendary => "Legendary", Tier::Set => "Set", Tier::Fabled => "Fabled", Tier::Mythic => "Mythic", })}}enum_from_into!(Tier, u8,u32,u64,i32,i64,usize);
#[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy,Debug)]
pub enum Category{#[default]Weapon,Armor,Accessory,Armour}
impl WynnEnum for Category{const VARIENTS:&'static[Self]=&[Self::Weapon,Self::Armor,Self::Accessory,Self::Armour];const ENUM_TYPE_ID:u8=5;}impl std::convert::TryFrom<u8> for Category{type Error=TryIntoWynnEnumError<u8,Self>;fn try_from(n: u8) -> Result<Self,Self::Error> {match n{0 => Ok(Category::Weapon), 1 => Ok(Category::Armor), 2 => Ok(Category::Accessory), 3 => Ok(Category::Armour), _ => Err(TryIntoWynnEnumError{from: n, to: Self::default()})}}}
impl fmt::Display for Category{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{Category::Weapon => "Weapon", Category::Armor => "Armor", Category::Accessory => "Accessory", Category::Armour => "Armour", })}}enum_from_into!(Category, u8,u32,u64,i32,i64,usize);
#[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy,Debug)]
pub enum AtkSpd{#[default]SuperSlow,VerySlow,Slow,Normal,Fast,VeryFast,SuperFast}
impl WynnEnum for AtkSpd{const VARIENTS:&'static[Self]=&[Self::SuperSlow,Self::VerySlow,Self::Slow,Self::Normal,Self::Fast,Self::VeryFast,Self::SuperFast];const ENUM_TYPE_ID:u8=6;}impl std::convert::TryFrom<u8> for AtkSpd{type Error=TryIntoWynnEnumError<u8,Self>;fn try_from(n: u8) -> Result<Self,Self::Error> {match n{0 => Ok(AtkSpd::SuperSlow), 1 => Ok(AtkSpd::VerySlow), 2 => Ok(AtkSpd::Slow), 3 => Ok(AtkSpd::Normal), 4 => Ok(AtkSpd::Fast), 5 => Ok(AtkSpd::VeryFast), 6 => Ok(AtkSpd::SuperFast), _ => Err(TryIntoWynnEnumError{from: n, to: Self::default()})}}}
impl fmt::Display for AtkSpd{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{AtkSpd::SuperSlow => "SuperSlow", AtkSpd::VerySlow => "VerySlow", AtkSpd::Slow => "Slow", AtkSpd::Normal => "Normal", AtkSpd::Fast => "Fast", AtkSpd::VeryFast => "VeryFast", AtkSpd::SuperFast => "SuperFast", })}}enum_from_into!(AtkSpd, u8,u32,u64,i32,i64,usize);
#[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy,Debug)]
pub enum Restrict{#[default]Untradable,QuestItem}
impl WynnEnum for Restrict{const VARIENTS:&'static[Self]=&[Self::Untradable,Self::QuestItem];const ENUM_TYPE_ID:u8=7;}impl std::convert::TryFrom<u8> for Restrict{type Error=TryIntoWynnEnumError<u8,Self>;fn try_from(n: u8) -> Result<Self,Self::Error> {match n{0 => Ok(Restrict::Untradable), 1 => Ok(Restrict::QuestItem), _ => Err(TryIntoWynnEnumError{from: n, to: Self::default()})}}}
impl fmt::Display for Restrict{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{Restrict::Untradable => "Untradable", Restrict::QuestItem => "QuestItem", })}}enum_from_into!(Restrict, u8,u32,u64,i32,i64,usize);
#[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy,Debug)]
pub enum MajorIds{#[default]Vitriol,Napalm,Vedette,Pounce,Lifestream,Fixate,TwistingThreads,DivineHonor,Sorcery,StringsOfFate,Insoluble,PerfectRecall,Efflorescence,FuriousEffigy,GentleGlow,SoulEater,FindThyself,Rally,MeteorCrash,Magnet,Greed,HeatShimmer,Plague,ForestBlessing,Madness,Expunge,Deadweight,FaustianGambit,Windsurf,Fission,Alterego,Freerunner,Arcanes,Rovingassassin,TotemicFuse,PerilousFlare,Punishment,Altruism,Hawkeye,Coagulate,Guardian,GruesomeKnots,Lunge,Cavalryman,Geocentrism,Sublimation,Hero,RecklessAbandon,HurricanesEye,Fallout,EscapeRoute,CherryBombs,Entropy,Lightweight,SeekingModule,PeacefulEffigy,Taunt,Paragon,Lustrate,RockShield,Temblor,Hellfire,LastResort,Flashfreeze,Lockdown,RustedIchor,Mangle,FreneticSpirit,Gravitywell,Juggle,Displace,Tackle,FlurryOfBlows,Methodical,Evershot,FrightOrFlight,PowerFist,ExplosiveImpact,DescSnowysteps,DescFestivespirit,Overwhelm}
impl WynnEnum for MajorIds{const VARIENTS:&'static[Self]=&[Self::Vitriol,Self::Napalm,Self::Vedette,Self::Pounce,Self::Lifestream,Self::Fixate,Self::TwistingThreads,Self::DivineHonor,Self::Sorcery,Self::StringsOfFate,Self::Insoluble,Self::PerfectRecall,Self::Efflorescence,Self::FuriousEffigy,Self::GentleGlow,Self::SoulEater,Self::FindThyself,Self::Rally,Self::MeteorCrash,Self::Magnet,Self::Greed,Self::HeatShimmer,Self::Plague,Self::ForestBlessing,Self::Madness,Self::Expunge,Self::Deadweight,Self::FaustianGambit,Self::Windsurf,Self::Fission,Self::Alterego,Self::Freerunner,Self::Arcanes,Self::Rovingassassin,Self::TotemicFuse,Self::PerilousFlare,Self::Punishment,Self::Altruism,Self::Hawkeye,Self::Coagulate,Self::Guardian,Self::GruesomeKnots,Self::Lunge,Self::Cavalryman,Self::Geocentrism,Self::Sublimation,Self::Hero,Self::RecklessAbandon,Self::HurricanesEye,Self::Fallout,Self::EscapeRoute,Self::CherryBombs,Self::Entropy,Self::Lightweight,Self::SeekingModule,Self::PeacefulEffigy,Self::Taunt,Self::Paragon,Self::Lustrate,Self::RockShield,Self::Temblor,Self::Hellfire,Self::LastResort,Self::Flashfreeze,Self::Lockdown,Self::RustedIchor,Self::Mangle,Self::FreneticSpirit,Self::Gravitywell,Self::Juggle,Self::Displace,Self::Tackle,Self::FlurryOfBlows,Self::Methodical,Self::Evershot,Self::FrightOrFlight,Self::PowerFist,Self::ExplosiveImpact,Self::DescSnowysteps,Self::DescFestivespirit,Self::Overwhelm];const ENUM_TYPE_ID:u8=8;}impl std::convert::TryFrom<u8> for MajorIds{type Error=TryIntoWynnEnumError<u8,Self>;fn try_from(n: u8) -> Result<Self,Self::Error> {match n{0 => Ok(MajorIds::Vitriol), 1 => Ok(MajorIds::Napalm), 2 => Ok(MajorIds::Vedette), 3 => Ok(MajorIds::Pounce), 4 => Ok(MajorIds::Lifestream), 5 => Ok(MajorIds::Fixate), 6 => Ok(MajorIds::TwistingThreads), 7 => Ok(MajorIds::DivineHonor), 8 => Ok(MajorIds::Sorcery), 9 => Ok(MajorIds::StringsOfFate), 10 => Ok(MajorIds::Insoluble), 11 => Ok(MajorIds::PerfectRecall), 12 => Ok(MajorIds::Efflorescence), 13 => Ok(MajorIds::FuriousEffigy), 14 => Ok(MajorIds::GentleGlow), 15 => Ok(MajorIds::SoulEater), 16 => Ok(MajorIds::FindThyself), 17 => Ok(MajorIds::Rally), 18 => Ok(MajorIds::MeteorCrash), 19 => Ok(MajorIds::Magnet), 20 => Ok(MajorIds::Greed), 21 => Ok(MajorIds::HeatShimmer), 22 => Ok(MajorIds::Plague), 23 => Ok(MajorIds::ForestBlessing), 24 => Ok(MajorIds::Madness), 25 => Ok(MajorIds::Expunge), 26 => Ok(MajorIds::Deadweight), 27 => Ok(MajorIds::FaustianGambit), 28 => Ok(MajorIds::Windsurf), 29 => Ok(MajorIds::Fission), 30 => Ok(MajorIds::Alterego), 31 => Ok(MajorIds::Freerunner), 32 => Ok(MajorIds::Arcanes), 33 => Ok(MajorIds::Rovingassassin), 34 => Ok(MajorIds::TotemicFuse), 35 => Ok(MajorIds::PerilousFlare), 36 => Ok(MajorIds::Punishment), 37 => Ok(MajorIds::Altruism), 38 => Ok(MajorIds::Hawkeye), 39 => Ok(MajorIds::Coagulate), 40 => Ok(MajorIds::Guardian), 41 => Ok(MajorIds::GruesomeKnots), 42 => Ok(MajorIds::Lunge), 43 => Ok(MajorIds::Cavalryman), 44 => Ok(MajorIds::Geocentrism), 45 => Ok(MajorIds::Sublimation), 46 => Ok(MajorIds::Hero), 47 => Ok(MajorIds::RecklessAbandon), 48 => Ok(MajorIds::HurricanesEye), 49 => Ok(MajorIds::Fallout), 50 => Ok(MajorIds::EscapeRoute), 51 => Ok(MajorIds::CherryBombs), 52 => Ok(MajorIds::Entropy), 53 => Ok(MajorIds::Lightweight), 54 => Ok(MajorIds::SeekingModule), 55 => Ok(MajorIds::PeacefulEffigy), 56 => Ok(MajorIds::Taunt), 57 => Ok(MajorIds::Paragon), 58 => Ok(MajorIds::Lustrate), 59 => Ok(MajorIds::RockShield), 60 => Ok(MajorIds::Temblor), 61 => Ok(MajorIds::Hellfire), 62 => Ok(MajorIds::LastResort), 63 => Ok(MajorIds::Flashfreeze), 64 => Ok(MajorIds::Lockdown), 65 => Ok(MajorIds::RustedIchor), 66 => Ok(MajorIds::Mangle), 67 => Ok(MajorIds::FreneticSpirit), 68 => Ok(MajorIds::Gravitywell), 69 => Ok(MajorIds::Juggle), 70 => Ok(MajorIds::Displace), 71 => Ok(MajorIds::Tackle), 72 => Ok(MajorIds::FlurryOfBlows), 73 => Ok(MajorIds::Methodical), 74 => Ok(MajorIds::Evershot), 75 => Ok(MajorIds::FrightOrFlight), 76 => Ok(MajorIds::PowerFist), 77 => Ok(MajorIds::ExplosiveImpact), 78 => Ok(MajorIds::DescSnowysteps), 79 => Ok(MajorIds::DescFestivespirit), 80 => Ok(MajorIds::Overwhelm), _ => Err(TryIntoWynnEnumError{from: n, to: Self::default()})}}}
impl fmt::Display for MajorIds{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{MajorIds::Vitriol => "Vitriol", MajorIds::Napalm => "Napalm", MajorIds::Vedette => "Vedette", MajorIds::Pounce => "Pounce", MajorIds::Lifestream => "Lifestream", MajorIds::Fixate => "Fixate", MajorIds::TwistingThreads => "TwistingThreads", MajorIds::DivineHonor => "DivineHonor", MajorIds::Sorcery => "Sorcery", MajorIds::StringsOfFate => "StringsOfFate", MajorIds::Insoluble => "Insoluble", MajorIds::PerfectRecall => "PerfectRecall", MajorIds::Efflorescence => "Efflorescence", MajorIds::FuriousEffigy => "FuriousEffigy", MajorIds::GentleGlow => "GentleGlow", MajorIds::SoulEater => "SoulEater", MajorIds::FindThyself => "FindThyself", MajorIds::Rally => "Rally", MajorIds::MeteorCrash => "MeteorCrash", MajorIds::Magnet => "Magnet", MajorIds::Greed => "Greed", MajorIds::HeatShimmer => "HeatShimmer", MajorIds::Plague => "Plague", MajorIds::ForestBlessing => "ForestBlessing", MajorIds::Madness => "Madness", MajorIds::Expunge => "Expunge", MajorIds::Deadweight => "Deadweight", MajorIds::FaustianGambit => "FaustianGambit", MajorIds::Windsurf => "Windsurf", MajorIds::Fission => "Fission", MajorIds::Alterego => "Alterego", MajorIds::Freerunner => "Freerunner", MajorIds::Arcanes => "Arcanes", MajorIds::Rovingassassin => "Rovingassassin", MajorIds::TotemicFuse => "TotemicFuse", MajorIds::PerilousFlare => "PerilousFlare", MajorIds::Punishment => "Punishment", MajorIds::Altruism => "Altruism", MajorIds::Hawkeye => "Hawkeye", MajorIds::Coagulate => "Coagulate", MajorIds::Guardian => "Guardian", MajorIds::GruesomeKnots => "GruesomeKnots", MajorIds::Lunge => "Lunge", MajorIds::Cavalryman => "Cavalryman", MajorIds::Geocentrism => "Geocentrism", MajorIds::Sublimation => "Sublimation", MajorIds::Hero => "Hero", MajorIds::RecklessAbandon => "RecklessAbandon", MajorIds::HurricanesEye => "HurricanesEye", MajorIds::Fallout => "Fallout", MajorIds::EscapeRoute => "EscapeRoute", MajorIds::CherryBombs => "CherryBombs", MajorIds::Entropy => "Entropy", MajorIds::Lightweight => "Lightweight", MajorIds::SeekingModule => "SeekingModule", MajorIds::PeacefulEffigy => "PeacefulEffigy", MajorIds::Taunt => "Taunt", MajorIds::Paragon => "Paragon", MajorIds::Lustrate => "Lustrate", MajorIds::RockShield => "RockShield", MajorIds::Temblor => "Temblor", MajorIds::Hellfire => "Hellfire", MajorIds::LastResort => "LastResort", MajorIds::Flashfreeze => "Flashfreeze", MajorIds::Lockdown => "Lockdown", MajorIds::RustedIchor => "RustedIchor", MajorIds::Mangle => "Mangle", MajorIds::FreneticSpirit => "FreneticSpirit", MajorIds::Gravitywell => "Gravitywell", MajorIds::Juggle => "Juggle", MajorIds::Displace => "Displace", MajorIds::Tackle => "Tackle", MajorIds::FlurryOfBlows => "FlurryOfBlows", MajorIds::Methodical => "Methodical", MajorIds::Evershot => "Evershot", MajorIds::FrightOrFlight => "FrightOrFlight", MajorIds::PowerFist => "PowerFist", MajorIds::ExplosiveImpact => "ExplosiveImpact", MajorIds::DescSnowysteps => "DescSnowysteps", MajorIds::DescFestivespirit => "DescFestivespirit", MajorIds::Overwhelm => "Overwhelm", })}}enum_from_into!(MajorIds, u8,u32,u64,i32,i64,usize);
/// Used to identify almost all types of data stored in wynncraft items. 
///
/// The following item attributes are ignored due to them either taking up a lot of memory or just not being useful for my application:
/// - `drop`
/// - `dropInfo`
/// - `armorColor`
/// - `skin`
/// - `material` 
/// - `armorType`
/// - `lore`
/// - `quest`
/// # Naming Convention
/// **Attributes** - (Almost) all data stored in wynncraft items<br>
/// **Properties** - Data intrinsic to items that don't get counted when calculating a build's stats. ie: `Type`, `Tier`, `ClassReq`, etc...<br>
/// **Stats** - All data used for calculating a build's stats, including all *identifications*, hp, and ele defs. Damages, skill reqs, and skill bonuses are not included. <br>
/// **Identifications** - All item *attributes* which are determined when identifying an item. These stats vary based on `WynnItem.quality`, unless `Atrs::FixID` is true. 
#[derive(Clone,Default,PartialEq,PartialOrd,Eq,Ord,Copy,Debug)]
pub enum Atrs{#[default]Type,Tier,Lvl,Category,Id,FixID,AtkSpd,Slots,Restrict,MajorIds,AllowCraftsman,ClassReq,Set,StrReq,DexReq,IntReq,DefReq,AgiReq,Str,Dex,Int,Def,Agi,NDam,EDam,TDam,WDam,FDam,ADam,Hp,EDef,TDef,WDef,FDef,ADef,DamMult,DefMult,AtkTier,CritDamPct,DamPct,DamRaw,ESteal,Expd,HealPct,HpBonus,HprPct,HprRaw,Jh,Kb,Lb,Ls,MainAtkRange,MaxMana,MdPct,MdRaw,Mr,Ms,Poison,Ref,SdPct,SdRaw,SlowEnemy,SpPct1,SpPct2,SpPct3,SpPct4,SpRaw1,SpRaw2,SpRaw3,SpRaw4,Spd,Sprint,SprintReg,Thorns,WeakenEnemy,Xpb,NDamPct,EDamPct,TDamPct,WDamPct,FDamPct,ADamPct,RDamPct,NSdPct,ESdPct,TSdPct,WSdPct,FSdPct,ASdPct,RSdPct,EDefPct,TDefPct,WDefPct,FDefPct,ADefPct,RDefPct,NDamRaw,EDamRaw,TDamRaw,WDamRaw,FDamRaw,ADamRaw,RDamRaw,NMdPct,EMdPct,TMdPct,WMdPct,FMdPct,AMdPct,RMdPct,NMdRaw,EMdRaw,TMdRaw,WMdRaw,FMdRaw,AMdRaw,RMdRaw,NSdRaw,ESdRaw,TSdRaw,WSdRaw,FSdRaw,ASdRaw,RSdRaw,NAddDam,EAddDam,TAddDam,WAddDam,FAddDam,AAddDam}
impl WynnEnum for Atrs{const VARIENTS:&'static[Self]=&[Self::Type,Self::Tier,Self::Lvl,Self::Category,Self::Id,Self::FixID,Self::AtkSpd,Self::Slots,Self::Restrict,Self::MajorIds,Self::AllowCraftsman,Self::ClassReq,Self::Set,Self::StrReq,Self::DexReq,Self::IntReq,Self::DefReq,Self::AgiReq,Self::Str,Self::Dex,Self::Int,Self::Def,Self::Agi,Self::NDam,Self::EDam,Self::TDam,Self::WDam,Self::FDam,Self::ADam,Self::Hp,Self::EDef,Self::TDef,Self::WDef,Self::FDef,Self::ADef,Self::DamMult,Self::DefMult,Self::AtkTier,Self::CritDamPct,Self::DamPct,Self::DamRaw,Self::ESteal,Self::Expd,Self::HealPct,Self::HpBonus,Self::HprPct,Self::HprRaw,Self::Jh,Self::Kb,Self::Lb,Self::Ls,Self::MainAtkRange,Self::MaxMana,Self::MdPct,Self::MdRaw,Self::Mr,Self::Ms,Self::Poison,Self::Ref,Self::SdPct,Self::SdRaw,Self::SlowEnemy,Self::SpPct1,Self::SpPct2,Self::SpPct3,Self::SpPct4,Self::SpRaw1,Self::SpRaw2,Self::SpRaw3,Self::SpRaw4,Self::Spd,Self::Sprint,Self::SprintReg,Self::Thorns,Self::WeakenEnemy,Self::Xpb,Self::NDamPct,Self::EDamPct,Self::TDamPct,Self::WDamPct,Self::FDamPct,Self::ADamPct,Self::RDamPct,Self::NSdPct,Self::ESdPct,Self::TSdPct,Self::WSdPct,Self::FSdPct,Self::ASdPct,Self::RSdPct,Self::EDefPct,Self::TDefPct,Self::WDefPct,Self::FDefPct,Self::ADefPct,Self::RDefPct,Self::NDamRaw,Self::EDamRaw,Self::TDamRaw,Self::WDamRaw,Self::FDamRaw,Self::ADamRaw,Self::RDamRaw,Self::NMdPct,Self::EMdPct,Self::TMdPct,Self::WMdPct,Self::FMdPct,Self::AMdPct,Self::RMdPct,Self::NMdRaw,Self::EMdRaw,Self::TMdRaw,Self::WMdRaw,Self::FMdRaw,Self::AMdRaw,Self::RMdRaw,Self::NSdRaw,Self::ESdRaw,Self::TSdRaw,Self::WSdRaw,Self::FSdRaw,Self::ASdRaw,Self::RSdRaw,Self::NAddDam,Self::EAddDam,Self::TAddDam,Self::WAddDam,Self::FAddDam,Self::AAddDam];const ENUM_TYPE_ID:u8=9;}impl std::convert::TryFrom<u8> for Atrs{type Error=TryIntoWynnEnumError<u8,Self>;fn try_from(n: u8) -> Result<Self,Self::Error> {match n{0 => Ok(Atrs::Type), 1 => Ok(Atrs::Tier), 2 => Ok(Atrs::Lvl), 3 => Ok(Atrs::Category), 4 => Ok(Atrs::Id), 5 => Ok(Atrs::FixID), 6 => Ok(Atrs::AtkSpd), 7 => Ok(Atrs::Slots), 8 => Ok(Atrs::Restrict), 9 => Ok(Atrs::MajorIds), 10 => Ok(Atrs::AllowCraftsman), 11 => Ok(Atrs::ClassReq), 12 => Ok(Atrs::Set), 13 => Ok(Atrs::StrReq), 14 => Ok(Atrs::DexReq), 15 => Ok(Atrs::IntReq), 16 => Ok(Atrs::DefReq), 17 => Ok(Atrs::AgiReq), 18 => Ok(Atrs::Str), 19 => Ok(Atrs::Dex), 20 => Ok(Atrs::Int), 21 => Ok(Atrs::Def), 22 => Ok(Atrs::Agi), 23 => Ok(Atrs::NDam), 24 => Ok(Atrs::EDam), 25 => Ok(Atrs::TDam), 26 => Ok(Atrs::WDam), 27 => Ok(Atrs::FDam), 28 => Ok(Atrs::ADam), 29 => Ok(Atrs::Hp), 30 => Ok(Atrs::EDef), 31 => Ok(Atrs::TDef), 32 => Ok(Atrs::WDef), 33 => Ok(Atrs::FDef), 34 => Ok(Atrs::ADef), 35 => Ok(Atrs::DamMult), 36 => Ok(Atrs::DefMult), 37 => Ok(Atrs::AtkTier), 38 => Ok(Atrs::CritDamPct), 39 => Ok(Atrs::DamPct), 40 => Ok(Atrs::DamRaw), 41 => Ok(Atrs::ESteal), 42 => Ok(Atrs::Expd), 43 => Ok(Atrs::HealPct), 44 => Ok(Atrs::HpBonus), 45 => Ok(Atrs::HprPct), 46 => Ok(Atrs::HprRaw), 47 => Ok(Atrs::Jh), 48 => Ok(Atrs::Kb), 49 => Ok(Atrs::Lb), 50 => Ok(Atrs::Ls), 51 => Ok(Atrs::MainAtkRange), 52 => Ok(Atrs::MaxMana), 53 => Ok(Atrs::MdPct), 54 => Ok(Atrs::MdRaw), 55 => Ok(Atrs::Mr), 56 => Ok(Atrs::Ms), 57 => Ok(Atrs::Poison), 58 => Ok(Atrs::Ref), 59 => Ok(Atrs::SdPct), 60 => Ok(Atrs::SdRaw), 61 => Ok(Atrs::SlowEnemy), 62 => Ok(Atrs::SpPct1), 63 => Ok(Atrs::SpPct2), 64 => Ok(Atrs::SpPct3), 65 => Ok(Atrs::SpPct4), 66 => Ok(Atrs::SpRaw1), 67 => Ok(Atrs::SpRaw2), 68 => Ok(Atrs::SpRaw3), 69 => Ok(Atrs::SpRaw4), 70 => Ok(Atrs::Spd), 71 => Ok(Atrs::Sprint), 72 => Ok(Atrs::SprintReg), 73 => Ok(Atrs::Thorns), 74 => Ok(Atrs::WeakenEnemy), 75 => Ok(Atrs::Xpb), 76 => Ok(Atrs::NDamPct), 77 => Ok(Atrs::EDamPct), 78 => Ok(Atrs::TDamPct), 79 => Ok(Atrs::WDamPct), 80 => Ok(Atrs::FDamPct), 81 => Ok(Atrs::ADamPct), 82 => Ok(Atrs::RDamPct), 83 => Ok(Atrs::NSdPct), 84 => Ok(Atrs::ESdPct), 85 => Ok(Atrs::TSdPct), 86 => Ok(Atrs::WSdPct), 87 => Ok(Atrs::FSdPct), 88 => Ok(Atrs::ASdPct), 89 => Ok(Atrs::RSdPct), 90 => Ok(Atrs::EDefPct), 91 => Ok(Atrs::TDefPct), 92 => Ok(Atrs::WDefPct), 93 => Ok(Atrs::FDefPct), 94 => Ok(Atrs::ADefPct), 95 => Ok(Atrs::RDefPct), 96 => Ok(Atrs::NDamRaw), 97 => Ok(Atrs::EDamRaw), 98 => Ok(Atrs::TDamRaw), 99 => Ok(Atrs::WDamRaw), 100 => Ok(Atrs::FDamRaw), 101 => Ok(Atrs::ADamRaw), 102 => Ok(Atrs::RDamRaw), 103 => Ok(Atrs::NMdPct), 104 => Ok(Atrs::EMdPct), 105 => Ok(Atrs::TMdPct), 106 => Ok(Atrs::WMdPct), 107 => Ok(Atrs::FMdPct), 108 => Ok(Atrs::AMdPct), 109 => Ok(Atrs::RMdPct), 110 => Ok(Atrs::NMdRaw), 111 => Ok(Atrs::EMdRaw), 112 => Ok(Atrs::TMdRaw), 113 => Ok(Atrs::WMdRaw), 114 => Ok(Atrs::FMdRaw), 115 => Ok(Atrs::AMdRaw), 116 => Ok(Atrs::RMdRaw), 117 => Ok(Atrs::NSdRaw), 118 => Ok(Atrs::ESdRaw), 119 => Ok(Atrs::TSdRaw), 120 => Ok(Atrs::WSdRaw), 121 => Ok(Atrs::FSdRaw), 122 => Ok(Atrs::ASdRaw), 123 => Ok(Atrs::RSdRaw), 124 => Ok(Atrs::NAddDam), 125 => Ok(Atrs::EAddDam), 126 => Ok(Atrs::TAddDam), 127 => Ok(Atrs::WAddDam), 128 => Ok(Atrs::FAddDam), 129 => Ok(Atrs::AAddDam), _ => Err(TryIntoWynnEnumError{from: n, to: Self::default()})}}}
impl fmt::Display for Atrs{fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {write!(f,"{}",match self{Atrs::Type => "type", Atrs::Tier => "tier", Atrs::Lvl => "lvl", Atrs::Category => "category", Atrs::Id => "id", Atrs::FixID => "fixID", Atrs::AtkSpd => "atkSpd", Atrs::Slots => "slots", Atrs::Restrict => "restrict", Atrs::MajorIds => "majorIds", Atrs::AllowCraftsman => "allowCraftsman", Atrs::ClassReq => "classReq", Atrs::Set => "set", Atrs::StrReq => "strReq", Atrs::DexReq => "dexReq", Atrs::IntReq => "intReq", Atrs::DefReq => "defReq", Atrs::AgiReq => "agiReq", Atrs::Str => "str", Atrs::Dex => "dex", Atrs::Int => "int", Atrs::Def => "def", Atrs::Agi => "agi", Atrs::NDam => "nDam", Atrs::EDam => "eDam", Atrs::TDam => "tDam", Atrs::WDam => "wDam", Atrs::FDam => "fDam", Atrs::ADam => "aDam", Atrs::Hp => "hp", Atrs::EDef => "eDef", Atrs::TDef => "tDef", Atrs::WDef => "wDef", Atrs::FDef => "fDef", Atrs::ADef => "aDef", Atrs::DamMult => "damMult", Atrs::DefMult => "defMult", Atrs::AtkTier => "atkTier", Atrs::CritDamPct => "critDamPct", Atrs::DamPct => "damPct", Atrs::DamRaw => "damRaw", Atrs::ESteal => "eSteal", Atrs::Expd => "expd", Atrs::HealPct => "healPct", Atrs::HpBonus => "hpBonus", Atrs::HprPct => "hprPct", Atrs::HprRaw => "hprRaw", Atrs::Jh => "jh", Atrs::Kb => "kb", Atrs::Lb => "lb", Atrs::Ls => "ls", Atrs::MainAtkRange => "mainAtkRange", Atrs::MaxMana => "maxMana", Atrs::MdPct => "mdPct", Atrs::MdRaw => "mdRaw", Atrs::Mr => "mr", Atrs::Ms => "ms", Atrs::Poison => "poison", Atrs::Ref => "ref", Atrs::SdPct => "sdPct", Atrs::SdRaw => "sdRaw", Atrs::SlowEnemy => "slowEnemy", Atrs::SpPct1 => "spPct1", Atrs::SpPct2 => "spPct2", Atrs::SpPct3 => "spPct3", Atrs::SpPct4 => "spPct4", Atrs::SpRaw1 => "spRaw1", Atrs::SpRaw2 => "spRaw2", Atrs::SpRaw3 => "spRaw3", Atrs::SpRaw4 => "spRaw4", Atrs::Spd => "spd", Atrs::Sprint => "sprint", Atrs::SprintReg => "sprintReg", Atrs::Thorns => "thorns", Atrs::WeakenEnemy => "weakenEnemy", Atrs::Xpb => "xpb", Atrs::NDamPct => "nDamPct", Atrs::EDamPct => "eDamPct", Atrs::TDamPct => "tDamPct", Atrs::WDamPct => "wDamPct", Atrs::FDamPct => "fDamPct", Atrs::ADamPct => "aDamPct", Atrs::RDamPct => "rDamPct", Atrs::NSdPct => "nSdPct", Atrs::ESdPct => "eSdPct", Atrs::TSdPct => "tSdPct", Atrs::WSdPct => "wSdPct", Atrs::FSdPct => "fSdPct", Atrs::ASdPct => "aSdPct", Atrs::RSdPct => "rSdPct", Atrs::EDefPct => "eDefPct", Atrs::TDefPct => "tDefPct", Atrs::WDefPct => "wDefPct", Atrs::FDefPct => "fDefPct", Atrs::ADefPct => "aDefPct", Atrs::RDefPct => "rDefPct", Atrs::NDamRaw => "nDamRaw", Atrs::EDamRaw => "eDamRaw", Atrs::TDamRaw => "tDamRaw", Atrs::WDamRaw => "wDamRaw", Atrs::FDamRaw => "fDamRaw", Atrs::ADamRaw => "aDamRaw", Atrs::RDamRaw => "rDamRaw", Atrs::NMdPct => "nMdPct", Atrs::EMdPct => "eMdPct", Atrs::TMdPct => "tMdPct", Atrs::WMdPct => "wMdPct", Atrs::FMdPct => "fMdPct", Atrs::AMdPct => "aMdPct", Atrs::RMdPct => "rMdPct", Atrs::NMdRaw => "nMdRaw", Atrs::EMdRaw => "eMdRaw", Atrs::TMdRaw => "tMdRaw", Atrs::WMdRaw => "wMdRaw", Atrs::FMdRaw => "fMdRaw", Atrs::AMdRaw => "aMdRaw", Atrs::RMdRaw => "rMdRaw", Atrs::NSdRaw => "nSdRaw", Atrs::ESdRaw => "eSdRaw", Atrs::TSdRaw => "tSdRaw", Atrs::WSdRaw => "wSdRaw", Atrs::FSdRaw => "fSdRaw", Atrs::ASdRaw => "aSdRaw", Atrs::RSdRaw => "rSdRaw", Atrs::NAddDam => "nAddDam", Atrs::EAddDam => "eAddDam", Atrs::TAddDam => "tAddDam", Atrs::WAddDam => "wAddDam", Atrs::FAddDam => "fAddDam", Atrs::AAddDam => "aAddDam", })}}enum_from_into!(Atrs, u8,u32,u64,i32,i64,usize);impl Atrs{/// Total number of item properties. Properties include most non-addable attributes of an item (rarity, category, etc)<br>See enums::Atrs for more info
pub const NUM_PROPS: usize = 13;
/// Total number of item stats. Includes all standard identifications, in addition to things such as elemental defs<br>See enums::Atrs for more info
pub const NUM_STATS: usize = 101;
/// Total number of elemental stats.<br>See enums::Atrs for more info
pub const NUM_ELE_STATS: usize = 54;
/// Simply `NUM_VARIENTS - NUM_STATS`<br>See `NUM_VARIENTS`, `NUM_STATS`, and `items::enums::Atrs` for more info
pub const NUM_NON_STATS: usize = 29;
/// Total number of identifications.<br>See `items::enums::Atrs` for more info
pub const NUM_IDS: usize = 93;
/// `NUM_VARIENTS - NUM_IDS`<br>See `items::enums::Atrs` for more info
pub const NUM_NON_IDS: usize = 37;
}